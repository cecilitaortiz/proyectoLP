
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEADD AND ASSIGN BOOL CHAR CLASS COLON COMMA CONSOLE DIVIDE DOT DOUBLE ELSE EQ FALSE FLOAT FLOAT_CONST FOR GE GT ID IF INT INT_CONST LBRACE LBRACKET LE LIST LPAREN LT MINUS MINUSEQUAL MINUSMINUS MOD NE NEW NOT OR PARSE PLUS PLUSEQUAL PLUSPLUS PRIVATE PROTECTED PUBLIC RBRACE RBRACKET READLINE RETURN RPAREN SEMICOLON STRING STRINGTYPE STRING_CONST TIMES TRUE USING VAR VOID WRITELINEprogram : declarationsdeclarations : declarations declarationdeclarations : declarationdeclaration : type ID ASSIGN expression SEMICOLONdeclaration : type ID SEMICOLONtype : INT\n           | FLOAT\n           | BOOL\n           | STRINGTYPEexpression : expression PLUS expression\n                 | expression MINUS expression\n                 | expression TIMES expression\n                 | expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : INT_CONST\n                 | FLOAT_CONSTexpression : TRUE\n                 | FALSEexpression : STRING_CONSTexpression : ID'
    
_lr_action_items = {'INT':([0,2,3,9,12,21,],[5,5,-3,-2,-5,-4,]),'FLOAT':([0,2,3,9,12,21,],[6,6,-3,-2,-5,-4,]),'BOOL':([0,2,3,9,12,21,],[7,7,-3,-2,-5,-4,]),'STRINGTYPE':([0,2,3,9,12,21,],[8,8,-3,-2,-5,-4,]),'$end':([1,2,3,9,12,21,],[0,-1,-3,-2,-5,-4,]),'ID':([4,5,6,7,8,11,15,22,23,24,25,],[10,-6,-7,-8,-9,13,13,13,13,13,13,]),'ASSIGN':([10,],[11,]),'SEMICOLON':([10,13,14,16,17,18,19,20,27,28,29,30,31,],[12,-20,21,-15,-16,-17,-18,-19,-10,-11,-12,-13,-14,]),'LPAREN':([11,15,22,23,24,25,],[15,15,15,15,15,15,]),'INT_CONST':([11,15,22,23,24,25,],[16,16,16,16,16,16,]),'FLOAT_CONST':([11,15,22,23,24,25,],[17,17,17,17,17,17,]),'TRUE':([11,15,22,23,24,25,],[18,18,18,18,18,18,]),'FALSE':([11,15,22,23,24,25,],[19,19,19,19,19,19,]),'STRING_CONST':([11,15,22,23,24,25,],[20,20,20,20,20,20,]),'PLUS':([13,14,16,17,18,19,20,26,27,28,29,30,31,],[-20,22,-15,-16,-17,-18,-19,22,-10,-11,-12,-13,-14,]),'MINUS':([13,14,16,17,18,19,20,26,27,28,29,30,31,],[-20,23,-15,-16,-17,-18,-19,23,-10,-11,-12,-13,-14,]),'TIMES':([13,14,16,17,18,19,20,26,27,28,29,30,31,],[-20,24,-15,-16,-17,-18,-19,24,24,24,-12,-13,-14,]),'DIVIDE':([13,14,16,17,18,19,20,26,27,28,29,30,31,],[-20,25,-15,-16,-17,-18,-19,25,25,25,-12,-13,-14,]),'RPAREN':([13,16,17,18,19,20,26,27,28,29,30,31,],[-20,-15,-16,-17,-18,-19,31,-10,-11,-12,-13,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([0,],[2,]),'declaration':([0,2,],[3,9,]),'type':([0,2,],[4,4,]),'expression':([11,15,22,23,24,25,],[14,26,27,28,29,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations','program',1,'p_program','syntax.py',22),
  ('declarations -> declarations declaration','declarations',2,'p_declarations_multiple','syntax.py',28),
  ('declarations -> declaration','declarations',1,'p_declarations_single','syntax.py',32),
  ('declaration -> type ID ASSIGN expression SEMICOLON','declaration',5,'p_declaration_init','syntax.py',38),
  ('declaration -> type ID SEMICOLON','declaration',3,'p_declaration_noinit','syntax.py',43),
  ('type -> INT','type',1,'p_type','syntax.py',50),
  ('type -> FLOAT','type',1,'p_type','syntax.py',51),
  ('type -> BOOL','type',1,'p_type','syntax.py',52),
  ('type -> STRINGTYPE','type',1,'p_type','syntax.py',53),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','syntax.py',59),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','syntax.py',60),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','syntax.py',61),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','syntax.py',62),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','syntax.py',66),
  ('expression -> INT_CONST','expression',1,'p_expression_number','syntax.py',70),
  ('expression -> FLOAT_CONST','expression',1,'p_expression_number','syntax.py',71),
  ('expression -> TRUE','expression',1,'p_expression_bool','syntax.py',75),
  ('expression -> FALSE','expression',1,'p_expression_bool','syntax.py',76),
  ('expression -> STRING_CONST','expression',1,'p_expression_string','syntax.py',80),
  ('expression -> ID','expression',1,'p_expression_id','syntax.py',84),
]
