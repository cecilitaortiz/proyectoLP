
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALSPLUSEQMINUSEQTIMESEQDIVEQMODEQleftORleftANDleftEQNEleftLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEMODrightNOTUMINUSABSTRACT ADD AMPERSAND AND APOSTROPHE ARROW AS BASE BOOL BREAK BYTE CASE CATCH CHAR CHECKED CLASS COLON COMMA COMMENT CONST CONTINUE DECIMAL DECREMENT DELEGATE DIVEQ DIVIDE DO DOT DOUBLE ELSE ENUM EQ EQUALS EVENT EXPLICIT EXTERN FALSE FINALLY FIXED FLOAT FOR FOREACH GE GET GT ID IF IMPLICIT INCREMENT INT INTERFACE IS LBRACE LBRACKET LE LIST LOCK LONG LPAREN LT MINUS MINUSEQ MOD MODEQ NAMESPACE NE NEW NOT NULL OBJECT OPERATOR OR OUT OVERRIDE PARAMS PARTIAL PIPE PLUS PLUSEQ PRIVATE PROTECTED PUBLIC QUESTION QUOTE RBRACE RBRACKET READONLY REF REMOVE RETURN RPAREN SBYTE SEMICOLON SET SHORT SIZEOF STACKALLOC STATIC STRING STRINGTYPE STRUCT SWITCH THIS THROW TIMES TIMESEQ TRUE TRY TYPEOF UINT ULONG UNCHECKED USHORT USING VAR VIRTUAL VOID WHILE YIELDprogram : class_listclass_list : class_list class_decl\n| class_declclass_decl : class_modifiers CLASS ID LBRACE class_body RBRACE\n| CLASS ID LBRACE class_body RBRACEclass_modifiers : class_modifiers class_modifier\n| class_modifierclass_modifier : PUBLIC\n| PRIVATEclass_body : class_body class_member\n| class_member\n| emptyclass_member : member_modifiers var_declaration\n| member_modifiers function_declaration\n| constructor_declaration\n| SEMICOLONmember_modifiers : member_modifiers member_modifier\n| member_modifier\n| emptymember_modifier : PUBLIC\n| PRIVATEconstructor_declaration : ID LPAREN parameter_list RPAREN blockvar_declaration : type ID SEMICOLON\n| type ID EQUALS expression SEMICOLONtype : INT\n| FLOAT\n| DOUBLE\n| STRINGTYPE\n| BOOL\n| CHAR\n| VAR\n| IDfunction_declaration : type ID LPAREN parameter_list RPAREN block\n| VOID ID LPAREN parameter_list RPAREN blockparameter_list : parameter_list COMMA parameter\n| parameter\n| emptyparameter : type IDblock : LBRACE statement_list RBRACEstatement_list : statement_list statement\n| statement\n| emptystatement : var_declaration\n| assignment\n| function_call SEMICOLON\n| if_statement\n| while_statement\n| for_statement\n| return_statement\n| break_statement\n| continue_statement\n| block\n| SEMICOLONassignment : ID EQUALS expression SEMICOLON\n| ID PLUSEQ expression SEMICOLON\n| ID MINUSEQ expression SEMICOLON\n| ID TIMESEQ expression SEMICOLON\n| ID DIVEQ expression SEMICOLON\n| ID MODEQ expression SEMICOLONfunction_call : ID LPAREN argument_list RPARENargument_list : argument_list COMMA expression\n| expression\n| emptyif_statement : IF LPAREN expression RPAREN statement else_clauseelse_clause : ELSE statement\n| emptywhile_statement : WHILE LPAREN expression RPAREN statementfor_statement : FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statementfor_init : var_declaration\n| assignment\n| emptyfor_condition : expression\n| emptyfor_iter : assignment\n| emptyreturn_statement : RETURN expression SEMICOLON\n| RETURN SEMICOLONbreak_statement : BREAK SEMICOLONcontinue_statement : CONTINUE SEMICOLONexpression : literal\n| ID\n| function_call\n| expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression MOD expression\n| expression LT expression\n| expression GT expression\n| expression LE expression\n| expression GE expression\n| expression EQ expression\n| expression NE expression\n| expression AND expression\n| expression OR expression\n| MINUS expression %prec UMINUS\n| NOT expression\n| LPAREN expression RPARENliteral : INT\n| FLOAT\n| DOUBLE\n| STRING\n| TRUE\n| FALSE\n| CHAR\n| NULLempty :'
    
_lr_action_items = {'CLASS':([0,2,3,4,6,7,8,9,11,28,44,],[5,5,-3,10,-7,-8,-9,-2,-6,-5,-4,]),'PUBLIC':([0,2,3,4,6,7,8,9,11,14,15,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,44,54,58,101,120,154,155,],[7,7,-3,7,-7,-8,-9,-2,-6,24,24,24,-11,-12,24,-15,-16,-18,-20,-21,24,-5,-10,-19,-13,-14,-17,-4,-23,-22,-24,-39,-33,-34,]),'PRIVATE':([0,2,3,4,6,7,8,9,11,14,15,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,44,54,58,101,120,154,155,],[8,8,-3,8,-7,-8,-9,-2,-6,25,25,25,-11,-12,25,-15,-16,-18,-20,-21,25,-5,-10,-19,-13,-14,-17,-4,-23,-22,-24,-39,-33,-34,]),'$end':([1,2,3,9,28,44,],[0,-1,-3,-2,-5,-4,]),'ID':([5,10,14,15,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,48,52,54,55,56,57,58,59,65,66,67,78,79,80,81,82,84,85,86,87,88,89,90,91,92,93,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,120,121,122,124,125,126,127,128,129,130,131,132,134,135,136,154,155,168,169,171,172,173,174,175,176,177,178,179,180,182,183,187,188,189,190,191,196,197,],[12,13,16,16,16,-11,-12,35,-15,-16,-18,-20,-21,16,35,-10,-19,-13,-14,-17,49,-32,50,-25,-26,-27,-28,-29,-30,-31,53,35,-23,61,35,35,-22,93,61,61,61,93,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,123,-32,61,61,-24,61,61,61,61,61,61,61,61,61,61,61,61,61,-39,-40,-45,61,61,61,61,61,61,61,61,168,-77,-78,-79,-33,-34,-32,-76,61,-54,-55,-56,-57,-58,-59,93,93,61,-107,-67,-64,93,-66,195,-65,93,-68,]),'LBRACE':([12,13,51,54,59,78,79,80,81,82,84,85,86,87,88,89,90,91,101,118,119,120,121,122,134,135,136,169,172,173,174,175,176,177,178,179,182,183,187,188,189,191,196,197,],[14,15,59,-23,59,59,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,-24,59,59,-39,-40,-45,-77,-78,-79,-76,-54,-55,-56,-57,-58,-59,59,59,-107,-67,-64,59,-66,-65,59,-68,]),'SEMICOLON':([14,15,17,18,19,21,22,26,29,31,32,49,54,58,59,61,62,63,64,68,69,70,71,72,73,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,99,101,115,116,120,121,122,123,132,133,134,135,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,164,165,166,167,169,170,172,173,174,175,176,177,178,179,180,182,183,184,185,186,187,188,189,191,196,197,],[22,22,22,-11,-12,-15,-16,22,-10,-13,-14,54,-23,-22,84,-81,101,-80,-82,-99,-100,-101,-102,-103,-104,-105,-106,84,-41,-42,-43,-44,122,-53,-46,-47,-48,-49,-50,-51,-52,134,135,136,-24,-96,-97,-39,-40,-45,54,-107,169,-77,-78,-79,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-98,-33,-34,172,173,174,175,176,177,180,-69,-70,-71,-76,-60,-54,-55,-56,-57,-58,-59,84,84,-107,-107,-67,190,-72,-73,-64,84,-66,-65,84,-68,]),'RBRACE':([14,15,17,18,19,21,22,26,29,31,32,54,58,59,78,79,80,81,82,84,85,86,87,88,89,90,91,101,120,121,122,134,135,136,154,155,169,172,173,174,175,176,177,182,183,187,189,191,197,],[-107,-107,28,-11,-12,-15,-16,44,-10,-13,-14,-23,-22,-107,120,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,-24,-39,-40,-45,-77,-78,-79,-33,-34,-76,-54,-55,-56,-57,-58,-59,-107,-67,-64,-66,-65,-68,]),'VOID':([14,15,17,18,19,20,21,22,23,24,25,26,29,30,31,32,33,54,58,101,120,154,155,],[-107,-107,-107,-11,-12,36,-15,-16,-18,-20,-21,-107,-10,-19,-13,-14,-17,-23,-22,-24,-39,-33,-34,]),'INT':([14,15,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,52,54,55,56,57,58,59,65,66,67,78,79,80,81,82,84,85,86,87,88,89,90,91,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,120,121,122,124,125,126,127,128,129,130,131,132,134,135,136,154,155,169,171,172,173,174,175,176,177,178,179,180,182,183,187,188,189,191,196,197,],[-107,-107,-107,-11,-12,37,-15,-16,-18,-20,-21,-107,37,-10,-19,-13,-14,-17,37,-23,68,37,37,-22,37,68,68,68,37,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,68,68,-24,68,68,68,68,68,68,68,68,68,68,68,68,68,-39,-40,-45,68,68,68,68,68,68,68,68,37,-77,-78,-79,-33,-34,-76,68,-54,-55,-56,-57,-58,-59,37,37,68,-107,-67,-64,37,-66,-65,37,-68,]),'FLOAT':([14,15,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,52,54,55,56,57,58,59,65,66,67,78,79,80,81,82,84,85,86,87,88,89,90,91,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,120,121,122,124,125,126,127,128,129,130,131,132,134,135,136,154,155,169,171,172,173,174,175,176,177,178,179,180,182,183,187,188,189,191,196,197,],[-107,-107,-107,-11,-12,38,-15,-16,-18,-20,-21,-107,38,-10,-19,-13,-14,-17,38,-23,69,38,38,-22,38,69,69,69,38,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,69,69,-24,69,69,69,69,69,69,69,69,69,69,69,69,69,-39,-40,-45,69,69,69,69,69,69,69,69,38,-77,-78,-79,-33,-34,-76,69,-54,-55,-56,-57,-58,-59,38,38,69,-107,-67,-64,38,-66,-65,38,-68,]),'DOUBLE':([14,15,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,52,54,55,56,57,58,59,65,66,67,78,79,80,81,82,84,85,86,87,88,89,90,91,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,120,121,122,124,125,126,127,128,129,130,131,132,134,135,136,154,155,169,171,172,173,174,175,176,177,178,179,180,182,183,187,188,189,191,196,197,],[-107,-107,-107,-11,-12,39,-15,-16,-18,-20,-21,-107,39,-10,-19,-13,-14,-17,39,-23,70,39,39,-22,39,70,70,70,39,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,70,70,-24,70,70,70,70,70,70,70,70,70,70,70,70,70,-39,-40,-45,70,70,70,70,70,70,70,70,39,-77,-78,-79,-33,-34,-76,70,-54,-55,-56,-57,-58,-59,39,39,70,-107,-67,-64,39,-66,-65,39,-68,]),'STRINGTYPE':([14,15,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,52,54,56,57,58,59,78,79,80,81,82,84,85,86,87,88,89,90,91,101,120,121,122,132,134,135,136,154,155,169,172,173,174,175,176,177,178,179,182,183,187,188,189,191,196,197,],[-107,-107,-107,-11,-12,40,-15,-16,-18,-20,-21,-107,40,-10,-19,-13,-14,-17,40,-23,40,40,-22,40,40,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,-24,-39,-40,-45,40,-77,-78,-79,-33,-34,-76,-54,-55,-56,-57,-58,-59,40,40,-107,-67,-64,40,-66,-65,40,-68,]),'BOOL':([14,15,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,52,54,56,57,58,59,78,79,80,81,82,84,85,86,87,88,89,90,91,101,120,121,122,132,134,135,136,154,155,169,172,173,174,175,176,177,178,179,182,183,187,188,189,191,196,197,],[-107,-107,-107,-11,-12,41,-15,-16,-18,-20,-21,-107,41,-10,-19,-13,-14,-17,41,-23,41,41,-22,41,41,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,-24,-39,-40,-45,41,-77,-78,-79,-33,-34,-76,-54,-55,-56,-57,-58,-59,41,41,-107,-67,-64,41,-66,-65,41,-68,]),'CHAR':([14,15,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,52,54,55,56,57,58,59,65,66,67,78,79,80,81,82,84,85,86,87,88,89,90,91,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,120,121,122,124,125,126,127,128,129,130,131,132,134,135,136,154,155,169,171,172,173,174,175,176,177,178,179,180,182,183,187,188,189,191,196,197,],[-107,-107,-107,-11,-12,42,-15,-16,-18,-20,-21,-107,42,-10,-19,-13,-14,-17,42,-23,74,42,42,-22,42,74,74,74,42,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,74,74,-24,74,74,74,74,74,74,74,74,74,74,74,74,74,-39,-40,-45,74,74,74,74,74,74,74,74,42,-77,-78,-79,-33,-34,-76,74,-54,-55,-56,-57,-58,-59,42,42,74,-107,-67,-64,42,-66,-65,42,-68,]),'VAR':([14,15,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,52,54,56,57,58,59,78,79,80,81,82,84,85,86,87,88,89,90,91,101,120,121,122,132,134,135,136,154,155,169,172,173,174,175,176,177,178,179,182,183,187,188,189,191,196,197,],[-107,-107,-107,-11,-12,43,-15,-16,-18,-20,-21,-107,43,-10,-19,-13,-14,-17,43,-23,43,43,-22,43,43,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,-24,-39,-40,-45,43,-77,-78,-79,-33,-34,-76,-54,-55,-56,-57,-58,-59,43,43,-107,-67,-64,43,-66,-65,43,-68,]),'LPAREN':([16,49,50,55,61,65,66,67,93,94,95,96,97,100,102,103,104,105,106,107,108,109,110,111,112,113,114,124,125,126,127,128,129,130,131,171,180,],[27,56,57,67,100,67,67,67,100,130,131,132,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'RPAREN':([27,45,46,47,53,56,57,60,61,63,64,68,69,70,71,72,73,74,75,76,77,100,115,116,117,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,162,163,170,172,173,174,175,176,177,181,190,192,193,194,],[-107,51,-36,-37,-38,-107,-107,-35,-81,-80,-82,-99,-100,-101,-102,-103,-104,-105,-106,118,119,-107,-96,-97,153,170,-62,-63,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-98,178,179,-60,-54,-55,-56,-57,-58,-59,-61,-107,196,-74,-75,]),'COMMA':([27,45,46,47,53,56,57,60,61,63,64,68,69,70,71,72,73,74,75,76,77,100,115,116,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,170,181,],[-107,52,-36,-37,-38,-107,-107,-35,-81,-80,-82,-99,-100,-101,-102,-103,-104,-105,-106,52,52,-107,-96,-97,171,-62,-63,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-98,-60,-61,]),'EQUALS':([49,93,123,168,195,],[55,124,55,124,124,]),'IF':([54,59,78,79,80,81,82,84,85,86,87,88,89,90,91,101,120,121,122,134,135,136,169,172,173,174,175,176,177,178,179,182,183,187,188,189,191,196,197,],[-23,94,94,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,-24,-39,-40,-45,-77,-78,-79,-76,-54,-55,-56,-57,-58,-59,94,94,-107,-67,-64,94,-66,-65,94,-68,]),'WHILE':([54,59,78,79,80,81,82,84,85,86,87,88,89,90,91,101,120,121,122,134,135,136,169,172,173,174,175,176,177,178,179,182,183,187,188,189,191,196,197,],[-23,95,95,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,-24,-39,-40,-45,-77,-78,-79,-76,-54,-55,-56,-57,-58,-59,95,95,-107,-67,-64,95,-66,-65,95,-68,]),'FOR':([54,59,78,79,80,81,82,84,85,86,87,88,89,90,91,101,120,121,122,134,135,136,169,172,173,174,175,176,177,178,179,182,183,187,188,189,191,196,197,],[-23,96,96,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,-24,-39,-40,-45,-77,-78,-79,-76,-54,-55,-56,-57,-58,-59,96,96,-107,-67,-64,96,-66,-65,96,-68,]),'RETURN':([54,59,78,79,80,81,82,84,85,86,87,88,89,90,91,101,120,121,122,134,135,136,169,172,173,174,175,176,177,178,179,182,183,187,188,189,191,196,197,],[-23,97,97,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,-24,-39,-40,-45,-77,-78,-79,-76,-54,-55,-56,-57,-58,-59,97,97,-107,-67,-64,97,-66,-65,97,-68,]),'BREAK':([54,59,78,79,80,81,82,84,85,86,87,88,89,90,91,101,120,121,122,134,135,136,169,172,173,174,175,176,177,178,179,182,183,187,188,189,191,196,197,],[-23,98,98,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,-24,-39,-40,-45,-77,-78,-79,-76,-54,-55,-56,-57,-58,-59,98,98,-107,-67,-64,98,-66,-65,98,-68,]),'CONTINUE':([54,59,78,79,80,81,82,84,85,86,87,88,89,90,91,101,120,121,122,134,135,136,169,172,173,174,175,176,177,178,179,182,183,187,188,189,191,196,197,],[-23,99,99,-41,-42,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,-24,-39,-40,-45,-77,-78,-79,-76,-54,-55,-56,-57,-58,-59,99,99,-107,-67,-64,99,-66,-65,99,-68,]),'ELSE':([54,81,82,84,85,86,87,88,89,90,91,101,120,122,134,135,136,169,172,173,174,175,176,177,182,183,187,189,191,197,],[-23,-43,-44,-53,-46,-47,-48,-49,-50,-51,-52,-24,-39,-45,-77,-78,-79,-76,-54,-55,-56,-57,-58,-59,188,-67,-64,-66,-65,-68,]),'MINUS':([55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,97,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,124,125,126,127,128,129,130,131,133,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,159,160,161,162,163,170,171,180,181,185,],[65,-81,103,-80,-82,65,65,65,-99,-100,-101,-102,-103,-104,-105,-106,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-96,-97,103,65,65,65,65,65,65,65,65,103,103,-83,-84,-85,-86,-87,103,103,103,103,103,103,103,103,-98,103,103,103,103,103,103,103,103,-60,65,65,103,103,]),'NOT':([55,65,66,67,97,100,102,103,104,105,106,107,108,109,110,111,112,113,114,124,125,126,127,128,129,130,131,171,180,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'STRING':([55,65,66,67,97,100,102,103,104,105,106,107,108,109,110,111,112,113,114,124,125,126,127,128,129,130,131,171,180,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'TRUE':([55,65,66,67,97,100,102,103,104,105,106,107,108,109,110,111,112,113,114,124,125,126,127,128,129,130,131,171,180,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'FALSE':([55,65,66,67,97,100,102,103,104,105,106,107,108,109,110,111,112,113,114,124,125,126,127,128,129,130,131,171,180,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'NULL':([55,65,66,67,97,100,102,103,104,105,106,107,108,109,110,111,112,113,114,124,125,126,127,128,129,130,131,171,180,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'PLUS':([61,62,63,64,68,69,70,71,72,73,74,75,115,116,117,133,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,159,160,161,162,163,170,181,185,],[-81,102,-80,-82,-99,-100,-101,-102,-103,-104,-105,-106,-96,-97,102,102,102,-83,-84,-85,-86,-87,102,102,102,102,102,102,102,102,-98,102,102,102,102,102,102,102,102,-60,102,102,]),'TIMES':([61,62,63,64,68,69,70,71,72,73,74,75,115,116,117,133,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,159,160,161,162,163,170,181,185,],[-81,104,-80,-82,-99,-100,-101,-102,-103,-104,-105,-106,-96,-97,104,104,104,104,104,-85,-86,-87,104,104,104,104,104,104,104,104,-98,104,104,104,104,104,104,104,104,-60,104,104,]),'DIVIDE':([61,62,63,64,68,69,70,71,72,73,74,75,115,116,117,133,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,159,160,161,162,163,170,181,185,],[-81,105,-80,-82,-99,-100,-101,-102,-103,-104,-105,-106,-96,-97,105,105,105,105,105,-85,-86,-87,105,105,105,105,105,105,105,105,-98,105,105,105,105,105,105,105,105,-60,105,105,]),'MOD':([61,62,63,64,68,69,70,71,72,73,74,75,115,116,117,133,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,159,160,161,162,163,170,181,185,],[-81,106,-80,-82,-99,-100,-101,-102,-103,-104,-105,-106,-96,-97,106,106,106,106,106,-85,-86,-87,106,106,106,106,106,106,106,106,-98,106,106,106,106,106,106,106,106,-60,106,106,]),'LT':([61,62,63,64,68,69,70,71,72,73,74,75,115,116,117,133,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,159,160,161,162,163,170,181,185,],[-81,107,-80,-82,-99,-100,-101,-102,-103,-104,-105,-106,-96,-97,107,107,107,-83,-84,-85,-86,-87,-88,-89,-90,-91,107,107,107,107,-98,107,107,107,107,107,107,107,107,-60,107,107,]),'GT':([61,62,63,64,68,69,70,71,72,73,74,75,115,116,117,133,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,159,160,161,162,163,170,181,185,],[-81,108,-80,-82,-99,-100,-101,-102,-103,-104,-105,-106,-96,-97,108,108,108,-83,-84,-85,-86,-87,-88,-89,-90,-91,108,108,108,108,-98,108,108,108,108,108,108,108,108,-60,108,108,]),'LE':([61,62,63,64,68,69,70,71,72,73,74,75,115,116,117,133,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,159,160,161,162,163,170,181,185,],[-81,109,-80,-82,-99,-100,-101,-102,-103,-104,-105,-106,-96,-97,109,109,109,-83,-84,-85,-86,-87,-88,-89,-90,-91,109,109,109,109,-98,109,109,109,109,109,109,109,109,-60,109,109,]),'GE':([61,62,63,64,68,69,70,71,72,73,74,75,115,116,117,133,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,159,160,161,162,163,170,181,185,],[-81,110,-80,-82,-99,-100,-101,-102,-103,-104,-105,-106,-96,-97,110,110,110,-83,-84,-85,-86,-87,-88,-89,-90,-91,110,110,110,110,-98,110,110,110,110,110,110,110,110,-60,110,110,]),'EQ':([61,62,63,64,68,69,70,71,72,73,74,75,115,116,117,133,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,159,160,161,162,163,170,181,185,],[-81,111,-80,-82,-99,-100,-101,-102,-103,-104,-105,-106,-96,-97,111,111,111,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,111,111,-98,111,111,111,111,111,111,111,111,-60,111,111,]),'NE':([61,62,63,64,68,69,70,71,72,73,74,75,115,116,117,133,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,159,160,161,162,163,170,181,185,],[-81,112,-80,-82,-99,-100,-101,-102,-103,-104,-105,-106,-96,-97,112,112,112,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,112,112,-98,112,112,112,112,112,112,112,112,-60,112,112,]),'AND':([61,62,63,64,68,69,70,71,72,73,74,75,115,116,117,133,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,159,160,161,162,163,170,181,185,],[-81,113,-80,-82,-99,-100,-101,-102,-103,-104,-105,-106,-96,-97,113,113,113,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,113,-98,113,113,113,113,113,113,113,113,-60,113,113,]),'OR':([61,62,63,64,68,69,70,71,72,73,74,75,115,116,117,133,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,159,160,161,162,163,170,181,185,],[-81,114,-80,-82,-99,-100,-101,-102,-103,-104,-105,-106,-96,-97,114,114,114,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-98,114,114,114,114,114,114,114,114,-60,114,114,]),'PLUSEQ':([93,168,195,],[125,125,125,]),'MINUSEQ':([93,168,195,],[126,126,126,]),'TIMESEQ':([93,168,195,],[127,127,127,]),'DIVEQ':([93,168,195,],[128,128,128,]),'MODEQ':([93,168,195,],[129,129,129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_list':([0,],[2,]),'class_decl':([0,2,],[3,9,]),'class_modifiers':([0,2,],[4,4,]),'class_modifier':([0,2,4,],[6,6,11,]),'class_body':([14,15,],[17,26,]),'class_member':([14,15,17,26,],[18,18,29,29,]),'empty':([14,15,17,26,27,56,57,59,100,132,180,182,190,],[19,19,30,30,47,47,47,80,139,167,186,189,194,]),'member_modifiers':([14,15,17,26,],[20,20,20,20,]),'constructor_declaration':([14,15,17,26,],[21,21,21,21,]),'member_modifier':([14,15,17,20,26,],[23,23,23,33,23,]),'var_declaration':([20,59,78,132,178,179,188,196,],[31,81,81,165,81,81,81,81,]),'function_declaration':([20,],[32,]),'type':([20,27,52,56,57,59,78,132,178,179,188,196,],[34,48,48,48,48,92,92,92,92,92,92,92,]),'parameter_list':([27,56,57,],[45,76,77,]),'parameter':([27,52,56,57,],[46,60,46,46,]),'block':([51,59,78,118,119,178,179,188,196,],[58,91,91,154,155,91,91,91,91,]),'expression':([55,65,66,67,97,100,102,103,104,105,106,107,108,109,110,111,112,113,114,124,125,126,127,128,129,130,131,171,180,],[62,115,116,117,133,138,140,141,142,143,144,145,146,147,148,149,150,151,152,156,157,158,159,160,161,162,163,181,185,]),'literal':([55,65,66,67,97,100,102,103,104,105,106,107,108,109,110,111,112,113,114,124,125,126,127,128,129,130,131,171,180,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'function_call':([55,59,65,66,67,78,97,100,102,103,104,105,106,107,108,109,110,111,112,113,114,124,125,126,127,128,129,130,131,171,178,179,180,188,196,],[64,83,64,64,64,83,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,83,83,64,83,83,]),'statement_list':([59,],[78,]),'statement':([59,78,178,179,188,196,],[79,121,182,183,191,197,]),'assignment':([59,78,132,178,179,188,190,196,],[82,82,166,82,82,82,193,82,]),'if_statement':([59,78,178,179,188,196,],[85,85,85,85,85,85,]),'while_statement':([59,78,178,179,188,196,],[86,86,86,86,86,86,]),'for_statement':([59,78,178,179,188,196,],[87,87,87,87,87,87,]),'return_statement':([59,78,178,179,188,196,],[88,88,88,88,88,88,]),'break_statement':([59,78,178,179,188,196,],[89,89,89,89,89,89,]),'continue_statement':([59,78,178,179,188,196,],[90,90,90,90,90,90,]),'argument_list':([100,],[137,]),'for_init':([132,],[164,]),'for_condition':([180,],[184,]),'else_clause':([182,],[187,]),'for_iter':([190,],[192,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','syntax.py',6),
  ('class_list -> class_list class_decl','class_list',2,'p_class_list','syntax.py',10),
  ('class_list -> class_decl','class_list',1,'p_class_list','syntax.py',11),
  ('class_decl -> class_modifiers CLASS ID LBRACE class_body RBRACE','class_decl',6,'p_class_decl','syntax.py',15),
  ('class_decl -> CLASS ID LBRACE class_body RBRACE','class_decl',5,'p_class_decl','syntax.py',16),
  ('class_modifiers -> class_modifiers class_modifier','class_modifiers',2,'p_class_modifiers','syntax.py',20),
  ('class_modifiers -> class_modifier','class_modifiers',1,'p_class_modifiers','syntax.py',21),
  ('class_modifier -> PUBLIC','class_modifier',1,'p_class_modifier','syntax.py',25),
  ('class_modifier -> PRIVATE','class_modifier',1,'p_class_modifier','syntax.py',26),
  ('class_body -> class_body class_member','class_body',2,'p_class_body','syntax.py',30),
  ('class_body -> class_member','class_body',1,'p_class_body','syntax.py',31),
  ('class_body -> empty','class_body',1,'p_class_body','syntax.py',32),
  ('class_member -> member_modifiers var_declaration','class_member',2,'p_class_member','syntax.py',36),
  ('class_member -> member_modifiers function_declaration','class_member',2,'p_class_member','syntax.py',37),
  ('class_member -> constructor_declaration','class_member',1,'p_class_member','syntax.py',38),
  ('class_member -> SEMICOLON','class_member',1,'p_class_member','syntax.py',39),
  ('member_modifiers -> member_modifiers member_modifier','member_modifiers',2,'p_member_modifiers','syntax.py',43),
  ('member_modifiers -> member_modifier','member_modifiers',1,'p_member_modifiers','syntax.py',44),
  ('member_modifiers -> empty','member_modifiers',1,'p_member_modifiers','syntax.py',45),
  ('member_modifier -> PUBLIC','member_modifier',1,'p_member_modifier','syntax.py',49),
  ('member_modifier -> PRIVATE','member_modifier',1,'p_member_modifier','syntax.py',50),
  ('constructor_declaration -> ID LPAREN parameter_list RPAREN block','constructor_declaration',5,'p_constructor_declaration','syntax.py',54),
  ('var_declaration -> type ID SEMICOLON','var_declaration',3,'p_var_declaration','syntax.py',58),
  ('var_declaration -> type ID EQUALS expression SEMICOLON','var_declaration',5,'p_var_declaration','syntax.py',59),
  ('type -> INT','type',1,'p_type','syntax.py',63),
  ('type -> FLOAT','type',1,'p_type','syntax.py',64),
  ('type -> DOUBLE','type',1,'p_type','syntax.py',65),
  ('type -> STRINGTYPE','type',1,'p_type','syntax.py',66),
  ('type -> BOOL','type',1,'p_type','syntax.py',67),
  ('type -> CHAR','type',1,'p_type','syntax.py',68),
  ('type -> VAR','type',1,'p_type','syntax.py',69),
  ('type -> ID','type',1,'p_type','syntax.py',70),
  ('function_declaration -> type ID LPAREN parameter_list RPAREN block','function_declaration',6,'p_function_declaration','syntax.py',74),
  ('function_declaration -> VOID ID LPAREN parameter_list RPAREN block','function_declaration',6,'p_function_declaration','syntax.py',75),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','syntax.py',79),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','syntax.py',80),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','syntax.py',81),
  ('parameter -> type ID','parameter',2,'p_parameter','syntax.py',85),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','syntax.py',89),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','syntax.py',93),
  ('statement_list -> statement','statement_list',1,'p_statement_list','syntax.py',94),
  ('statement_list -> empty','statement_list',1,'p_statement_list','syntax.py',95),
  ('statement -> var_declaration','statement',1,'p_statement','syntax.py',99),
  ('statement -> assignment','statement',1,'p_statement','syntax.py',100),
  ('statement -> function_call SEMICOLON','statement',2,'p_statement','syntax.py',101),
  ('statement -> if_statement','statement',1,'p_statement','syntax.py',102),
  ('statement -> while_statement','statement',1,'p_statement','syntax.py',103),
  ('statement -> for_statement','statement',1,'p_statement','syntax.py',104),
  ('statement -> return_statement','statement',1,'p_statement','syntax.py',105),
  ('statement -> break_statement','statement',1,'p_statement','syntax.py',106),
  ('statement -> continue_statement','statement',1,'p_statement','syntax.py',107),
  ('statement -> block','statement',1,'p_statement','syntax.py',108),
  ('statement -> SEMICOLON','statement',1,'p_statement','syntax.py',109),
  ('assignment -> ID EQUALS expression SEMICOLON','assignment',4,'p_assignment','syntax.py',113),
  ('assignment -> ID PLUSEQ expression SEMICOLON','assignment',4,'p_assignment','syntax.py',114),
  ('assignment -> ID MINUSEQ expression SEMICOLON','assignment',4,'p_assignment','syntax.py',115),
  ('assignment -> ID TIMESEQ expression SEMICOLON','assignment',4,'p_assignment','syntax.py',116),
  ('assignment -> ID DIVEQ expression SEMICOLON','assignment',4,'p_assignment','syntax.py',117),
  ('assignment -> ID MODEQ expression SEMICOLON','assignment',4,'p_assignment','syntax.py',118),
  ('function_call -> ID LPAREN argument_list RPAREN','function_call',4,'p_function_call','syntax.py',122),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','syntax.py',126),
  ('argument_list -> expression','argument_list',1,'p_argument_list','syntax.py',127),
  ('argument_list -> empty','argument_list',1,'p_argument_list','syntax.py',128),
  ('if_statement -> IF LPAREN expression RPAREN statement else_clause','if_statement',6,'p_if_statement','syntax.py',132),
  ('else_clause -> ELSE statement','else_clause',2,'p_else_clause','syntax.py',136),
  ('else_clause -> empty','else_clause',1,'p_else_clause','syntax.py',137),
  ('while_statement -> WHILE LPAREN expression RPAREN statement','while_statement',5,'p_while_statement','syntax.py',141),
  ('for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement','for_statement',9,'p_for_statement','syntax.py',145),
  ('for_init -> var_declaration','for_init',1,'p_for_init','syntax.py',149),
  ('for_init -> assignment','for_init',1,'p_for_init','syntax.py',150),
  ('for_init -> empty','for_init',1,'p_for_init','syntax.py',151),
  ('for_condition -> expression','for_condition',1,'p_for_condition','syntax.py',155),
  ('for_condition -> empty','for_condition',1,'p_for_condition','syntax.py',156),
  ('for_iter -> assignment','for_iter',1,'p_for_iter','syntax.py',160),
  ('for_iter -> empty','for_iter',1,'p_for_iter','syntax.py',161),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','syntax.py',165),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','syntax.py',166),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','syntax.py',170),
  ('continue_statement -> CONTINUE SEMICOLON','continue_statement',2,'p_continue_statement','syntax.py',174),
  ('expression -> literal','expression',1,'p_expression','syntax.py',178),
  ('expression -> ID','expression',1,'p_expression','syntax.py',179),
  ('expression -> function_call','expression',1,'p_expression','syntax.py',180),
  ('expression -> expression PLUS expression','expression',3,'p_expression','syntax.py',181),
  ('expression -> expression MINUS expression','expression',3,'p_expression','syntax.py',182),
  ('expression -> expression TIMES expression','expression',3,'p_expression','syntax.py',183),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','syntax.py',184),
  ('expression -> expression MOD expression','expression',3,'p_expression','syntax.py',185),
  ('expression -> expression LT expression','expression',3,'p_expression','syntax.py',186),
  ('expression -> expression GT expression','expression',3,'p_expression','syntax.py',187),
  ('expression -> expression LE expression','expression',3,'p_expression','syntax.py',188),
  ('expression -> expression GE expression','expression',3,'p_expression','syntax.py',189),
  ('expression -> expression EQ expression','expression',3,'p_expression','syntax.py',190),
  ('expression -> expression NE expression','expression',3,'p_expression','syntax.py',191),
  ('expression -> expression AND expression','expression',3,'p_expression','syntax.py',192),
  ('expression -> expression OR expression','expression',3,'p_expression','syntax.py',193),
  ('expression -> MINUS expression','expression',2,'p_expression','syntax.py',194),
  ('expression -> NOT expression','expression',2,'p_expression','syntax.py',195),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','syntax.py',196),
  ('literal -> INT','literal',1,'p_literal','syntax.py',200),
  ('literal -> FLOAT','literal',1,'p_literal','syntax.py',201),
  ('literal -> DOUBLE','literal',1,'p_literal','syntax.py',202),
  ('literal -> STRING','literal',1,'p_literal','syntax.py',203),
  ('literal -> TRUE','literal',1,'p_literal','syntax.py',204),
  ('literal -> FALSE','literal',1,'p_literal','syntax.py',205),
  ('literal -> CHAR','literal',1,'p_literal','syntax.py',206),
  ('literal -> NULL','literal',1,'p_literal','syntax.py',207),
  ('empty -> <empty>','empty',0,'p_empty','syntax.py',211),
]
