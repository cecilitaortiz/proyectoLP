
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTleftPLUSMINUSleftTIMESDIVIDErightUMINUSADD AND ASSIGN BOOL CHAR CLASS COLON COMMA CONSOLE DIVIDE DOT DOUBLE ELSE EQ FALSE FLOAT FLOAT_CONST FOR GE GT ID IF INT INT_CONST LBRACE LBRACKET LE LIST LPAREN LT MINUS MINUSEQUAL MINUSMINUS MOD NE NEW NOT OR PARSE PLUS PLUSEQUAL PLUSPLUS PRIVATE PROTECTED PUBLIC RBRACE RBRACKET READLINE RETURN RPAREN SEMICOLON STRING STRINGTYPE STRING_CONST TIMES TRUE USING VAR VOID WRITELINEprogram : declarationsdeclarations : declarations declarationdeclarations : declarationdeclarations : declaration : type ID ASSIGN expression SEMICOLONdeclaration : type ID SEMICOLONdeclaration : CONSOLE DOT WRITELINE LPAREN expression RPAREN SEMICOLONdeclaration : IF LPAREN expression RPAREN LBRACE declarations RBRACE else_partelse_part : ELSE LBRACE declarations RBRACEelse_part : ELSE IF LPAREN expression RPAREN LBRACE declarations RBRACE else_partelse_part : declaration : FOR LPAREN for_init SEMICOLON for_cond SEMICOLON for_iter RPAREN LBRACE declarations RBRACEfor_init : type ID ASSIGN expressionfor_init : ID ASSIGN expressionfor_init : expressionfor_init : for_cond : expressionfor_cond : for_iter : ID ASSIGN expressionfor_iter : expressionfor_iter : type : INT\n| FLOAT\n| BOOL\n| STRINGTYPEexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expressionexpression : expression GT expression\n| expression LT expression\n| expression GE expression\n| expression LE expression\n| expression EQ expression\n| expression NE expressionexpression : LPAREN expression RPARENexpression : INT_CONST\n| FLOAT_CONSTexpression : TRUE\n| FALSEexpression : STRING_CONSTexpression : IDexpression : MINUS expression %prec UMINUSexpression : CONSOLE DOT READLINE LPAREN RPARENexpression : INT DOT PARSE LPAREN expression RPARENexpression : expression AND expressionexpression : expression OR expressionexpression : NOT expressiondeclaration : type ID LPAREN params RPAREN LBRACE declarations RBRACEparams : params COMMA paramparams : paramparams : param : type IDexpression : ID LPAREN args RPARENargs : args COMMA expressionargs : expressionargs : declaration : ID LPAREN args RPAREN SEMICOLONdeclaration : RETURN expression SEMICOLON'
    
_lr_action_items = {'CONSOLE':([0,2,3,9,14,16,18,19,21,22,31,32,33,44,45,46,47,48,49,50,51,52,53,54,55,56,59,68,69,71,73,90,94,97,100,104,105,108,109,113,114,115,120,121,124,125,127,129,130,131,132,134,136,137,138,139,],[6,6,-3,29,-2,29,29,29,29,29,29,29,-6,-59,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-5,-58,6,29,29,6,6,29,6,-7,-11,-49,-8,29,6,6,6,29,6,-9,-12,6,6,-11,-10,]),'IF':([0,2,3,14,33,44,90,94,97,105,108,113,114,115,120,121,122,125,127,129,131,132,134,136,137,138,139,],[7,7,-3,-2,-6,-59,-5,-58,7,7,7,7,-7,-11,-49,-8,126,7,7,7,7,-9,-12,7,7,-11,-10,]),'FOR':([0,2,3,14,33,44,90,94,97,105,108,113,114,115,120,121,125,127,129,131,132,134,136,137,138,139,],[8,8,-3,-2,-6,-59,-5,-58,8,8,8,8,-7,-11,-49,-8,8,8,8,8,-9,-12,8,8,-11,-10,]),'ID':([0,2,3,4,9,10,11,12,13,14,16,18,19,21,22,31,32,33,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,64,68,69,71,73,90,94,97,100,104,105,108,109,113,114,115,120,121,124,125,127,129,130,131,132,134,136,137,138,139,],[5,5,-3,15,28,-22,-23,-24,-25,-2,28,28,41,28,28,28,28,-6,72,-22,-59,28,28,28,28,28,28,28,28,28,28,28,28,28,91,28,28,28,28,-5,-58,5,28,28,5,5,117,5,-7,-11,-49,-8,28,5,5,5,28,5,-9,-12,5,5,-11,-10,]),'RETURN':([0,2,3,14,33,44,90,94,97,105,108,113,114,115,120,121,125,127,129,131,132,134,136,137,138,139,],[9,9,-3,-2,-6,-59,-5,-58,9,9,9,9,-7,-11,-49,-8,9,9,9,9,-9,-12,9,9,-11,-10,]),'INT':([0,2,3,9,14,16,18,19,21,22,31,32,33,34,44,45,46,47,48,49,50,51,52,53,54,55,56,59,68,69,71,73,90,93,94,97,100,104,105,108,109,113,114,115,120,121,124,125,127,129,130,131,132,134,136,137,138,139,],[10,10,-3,30,-2,30,30,43,30,30,30,30,-6,10,-59,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-5,10,-58,10,30,30,10,10,30,10,-7,-11,-49,-8,30,10,10,10,30,10,-9,-12,10,10,-11,-10,]),'FLOAT':([0,2,3,14,19,33,34,44,90,93,94,97,105,108,113,114,115,120,121,125,127,129,131,132,134,136,137,138,139,],[11,11,-3,-2,11,-6,11,-59,-5,11,-58,11,11,11,11,-7,-11,-49,-8,11,11,11,11,-9,-12,11,11,-11,-10,]),'BOOL':([0,2,3,14,19,33,34,44,90,93,94,97,105,108,113,114,115,120,121,125,127,129,131,132,134,136,137,138,139,],[12,12,-3,-2,12,-6,12,-59,-5,12,-58,12,12,12,12,-7,-11,-49,-8,12,12,12,12,-9,-12,12,12,-11,-10,]),'STRINGTYPE':([0,2,3,14,19,33,34,44,90,93,94,97,105,108,113,114,115,120,121,125,127,129,131,132,134,136,137,138,139,],[13,13,-3,-2,13,-6,13,-59,-5,13,-58,13,13,13,13,-7,-11,-49,-8,13,13,13,13,-9,-12,13,13,-11,-10,]),'$end':([0,1,2,3,14,33,44,90,94,114,115,120,121,132,134,138,139,],[-4,0,-1,-3,-2,-6,-59,-5,-58,-7,-11,-49,-8,-9,-12,-11,-10,]),'RBRACE':([3,14,33,44,90,94,97,105,108,113,114,115,120,121,125,127,129,131,132,134,136,137,138,139,],[-3,-2,-6,-59,-5,-58,-4,-4,115,120,-7,-11,-49,-8,-4,-4,132,134,-9,-12,-4,138,-11,-10,]),'LPAREN':([5,7,8,9,15,16,18,19,21,22,28,31,32,37,41,45,46,47,48,49,50,51,52,53,54,55,56,59,68,69,71,73,88,89,100,104,109,117,124,126,130,],[16,18,19,22,34,22,22,22,22,22,59,22,22,69,59,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,103,104,22,22,22,59,22,130,22,]),'DOT':([6,29,30,43,],[17,60,61,61,]),'INT_CONST':([9,16,18,19,21,22,31,32,45,46,47,48,49,50,51,52,53,54,55,56,59,68,69,71,73,100,104,109,124,130,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'FLOAT_CONST':([9,16,18,19,21,22,31,32,45,46,47,48,49,50,51,52,53,54,55,56,59,68,69,71,73,100,104,109,124,130,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'TRUE':([9,16,18,19,21,22,31,32,45,46,47,48,49,50,51,52,53,54,55,56,59,68,69,71,73,100,104,109,124,130,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'FALSE':([9,16,18,19,21,22,31,32,45,46,47,48,49,50,51,52,53,54,55,56,59,68,69,71,73,100,104,109,124,130,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'STRING_CONST':([9,16,18,19,21,22,31,32,45,46,47,48,49,50,51,52,53,54,55,56,59,68,69,71,73,100,104,109,124,130,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'MINUS':([9,16,18,19,20,21,22,23,24,25,26,27,28,31,32,36,38,41,42,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,63,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,95,96,99,100,101,102,104,109,110,111,112,117,118,119,124,128,130,133,],[21,21,21,21,46,21,21,-37,-38,-39,-40,-41,-42,21,21,46,46,-42,46,21,21,21,21,21,21,21,21,21,21,21,21,-43,46,21,46,46,21,21,21,21,-26,-27,-28,-29,46,46,46,46,46,46,46,46,-36,46,46,46,21,46,-54,21,21,46,-44,46,-42,46,-45,21,46,21,46,]),'NOT':([9,16,18,19,21,22,31,32,45,46,47,48,49,50,51,52,53,54,55,56,59,68,69,71,73,100,104,109,124,130,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'ASSIGN':([15,41,72,117,],[32,73,100,124,]),'SEMICOLON':([15,19,20,23,24,25,26,27,28,39,41,42,57,62,63,67,71,74,75,76,77,78,79,80,81,82,83,84,85,86,98,99,101,102,107,110,111,119,],[33,-16,44,-37,-38,-39,-40,-41,-42,71,-42,-15,-43,-48,90,94,-18,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-46,-47,-36,109,-17,-14,-54,114,-13,-44,-45,]),'RPAREN':([16,23,24,25,26,27,28,34,35,36,38,57,58,59,62,65,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,95,96,102,103,106,109,111,112,116,117,118,119,128,133,],[-57,-37,-38,-39,-40,-41,-42,-52,67,-56,70,-43,86,-57,-48,92,-51,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-46,-47,-36,102,-53,-55,107,-54,111,-50,-21,-44,119,123,-42,-20,-45,-19,135,]),'COMMA':([16,23,24,25,26,27,28,34,35,36,57,59,62,65,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,95,102,106,111,119,],[-57,-37,-38,-39,-40,-41,-42,-52,68,-56,-43,-57,-48,93,-51,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-46,-47,-36,68,-53,-55,-54,-50,-44,-45,]),'WRITELINE':([17,],[37,]),'PLUS':([20,23,24,25,26,27,28,36,38,41,42,57,58,62,63,74,75,76,77,78,79,80,81,82,83,84,85,86,95,96,99,101,102,110,111,112,117,118,119,128,133,],[45,-37,-38,-39,-40,-41,-42,45,45,-42,45,-43,45,45,45,-26,-27,-28,-29,45,45,45,45,45,45,45,45,-36,45,45,45,45,-54,45,-44,45,-42,45,-45,45,45,]),'TIMES':([20,23,24,25,26,27,28,36,38,41,42,57,58,62,63,74,75,76,77,78,79,80,81,82,83,84,85,86,95,96,99,101,102,110,111,112,117,118,119,128,133,],[47,-37,-38,-39,-40,-41,-42,47,47,-42,47,-43,47,47,47,47,47,-28,-29,47,47,47,47,47,47,47,47,-36,47,47,47,47,-54,47,-44,47,-42,47,-45,47,47,]),'DIVIDE':([20,23,24,25,26,27,28,36,38,41,42,57,58,62,63,74,75,76,77,78,79,80,81,82,83,84,85,86,95,96,99,101,102,110,111,112,117,118,119,128,133,],[48,-37,-38,-39,-40,-41,-42,48,48,-42,48,-43,48,48,48,48,48,-28,-29,48,48,48,48,48,48,48,48,-36,48,48,48,48,-54,48,-44,48,-42,48,-45,48,48,]),'GT':([20,23,24,25,26,27,28,36,38,41,42,57,58,62,63,74,75,76,77,78,79,80,81,82,83,84,85,86,95,96,99,101,102,110,111,112,117,118,119,128,133,],[49,-37,-38,-39,-40,-41,-42,49,49,-42,49,-43,49,-48,49,-26,-27,-28,-29,49,49,49,49,49,49,-46,-47,-36,49,49,49,49,-54,49,-44,49,-42,49,-45,49,49,]),'LT':([20,23,24,25,26,27,28,36,38,41,42,57,58,62,63,74,75,76,77,78,79,80,81,82,83,84,85,86,95,96,99,101,102,110,111,112,117,118,119,128,133,],[50,-37,-38,-39,-40,-41,-42,50,50,-42,50,-43,50,-48,50,-26,-27,-28,-29,50,50,50,50,50,50,-46,-47,-36,50,50,50,50,-54,50,-44,50,-42,50,-45,50,50,]),'GE':([20,23,24,25,26,27,28,36,38,41,42,57,58,62,63,74,75,76,77,78,79,80,81,82,83,84,85,86,95,96,99,101,102,110,111,112,117,118,119,128,133,],[51,-37,-38,-39,-40,-41,-42,51,51,-42,51,-43,51,-48,51,-26,-27,-28,-29,51,51,51,51,51,51,-46,-47,-36,51,51,51,51,-54,51,-44,51,-42,51,-45,51,51,]),'LE':([20,23,24,25,26,27,28,36,38,41,42,57,58,62,63,74,75,76,77,78,79,80,81,82,83,84,85,86,95,96,99,101,102,110,111,112,117,118,119,128,133,],[52,-37,-38,-39,-40,-41,-42,52,52,-42,52,-43,52,-48,52,-26,-27,-28,-29,52,52,52,52,52,52,-46,-47,-36,52,52,52,52,-54,52,-44,52,-42,52,-45,52,52,]),'EQ':([20,23,24,25,26,27,28,36,38,41,42,57,58,62,63,74,75,76,77,78,79,80,81,82,83,84,85,86,95,96,99,101,102,110,111,112,117,118,119,128,133,],[53,-37,-38,-39,-40,-41,-42,53,53,-42,53,-43,53,-48,53,-26,-27,-28,-29,53,53,53,53,53,53,-46,-47,-36,53,53,53,53,-54,53,-44,53,-42,53,-45,53,53,]),'NE':([20,23,24,25,26,27,28,36,38,41,42,57,58,62,63,74,75,76,77,78,79,80,81,82,83,84,85,86,95,96,99,101,102,110,111,112,117,118,119,128,133,],[54,-37,-38,-39,-40,-41,-42,54,54,-42,54,-43,54,-48,54,-26,-27,-28,-29,54,54,54,54,54,54,-46,-47,-36,54,54,54,54,-54,54,-44,54,-42,54,-45,54,54,]),'AND':([20,23,24,25,26,27,28,36,38,41,42,57,58,62,63,74,75,76,77,78,79,80,81,82,83,84,85,86,95,96,99,101,102,110,111,112,117,118,119,128,133,],[55,-37,-38,-39,-40,-41,-42,55,55,-42,55,-43,55,-48,55,-26,-27,-28,-29,55,55,55,55,55,55,-46,55,-36,55,55,55,55,-54,55,-44,55,-42,55,-45,55,55,]),'OR':([20,23,24,25,26,27,28,36,38,41,42,57,58,62,63,74,75,76,77,78,79,80,81,82,83,84,85,86,95,96,99,101,102,110,111,112,117,118,119,128,133,],[56,-37,-38,-39,-40,-41,-42,56,56,-42,56,-43,56,-48,56,-26,-27,-28,-29,56,56,56,56,56,56,-46,-47,-36,56,56,56,56,-54,56,-44,56,-42,56,-45,56,56,]),'READLINE':([60,],[88,]),'PARSE':([61,],[89,]),'LBRACE':([70,92,122,123,135,],[97,105,125,127,136,]),'ELSE':([115,138,],[122,122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([0,97,105,125,127,136,],[2,108,113,129,131,137,]),'declaration':([0,2,97,105,108,113,125,127,129,131,136,137,],[3,14,3,3,14,14,3,3,14,14,3,14,]),'type':([0,2,19,34,93,97,105,108,113,125,127,129,131,136,137,],[4,4,40,64,64,4,4,4,4,4,4,4,4,4,4,]),'expression':([9,16,18,19,21,22,31,32,45,46,47,48,49,50,51,52,53,54,55,56,59,68,69,71,73,100,104,109,124,130,],[20,36,38,42,57,58,62,63,74,75,76,77,78,79,80,81,82,83,84,85,36,95,96,99,101,110,112,118,128,133,]),'args':([16,59,],[35,87,]),'for_init':([19,],[39,]),'params':([34,],[65,]),'param':([34,93,],[66,106,]),'for_cond':([71,],[98,]),'for_iter':([109,],[116,]),'else_part':([115,138,],[121,139,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations','program',1,'p_program','syntax.py',17),
  ('declarations -> declarations declaration','declarations',2,'p_declarations_multiple','syntax.py',23),
  ('declarations -> declaration','declarations',1,'p_declarations_single','syntax.py',27),
  ('declarations -> <empty>','declarations',0,'p_declarations_empty','syntax.py',31),
  ('declaration -> type ID ASSIGN expression SEMICOLON','declaration',5,'p_declaration_init','syntax.py',51),
  ('declaration -> type ID SEMICOLON','declaration',3,'p_declaration_noinit','syntax.py',56),
  ('declaration -> CONSOLE DOT WRITELINE LPAREN expression RPAREN SEMICOLON','declaration',7,'p_declaration_print','syntax.py',63),
  ('declaration -> IF LPAREN expression RPAREN LBRACE declarations RBRACE else_part','declaration',8,'p_declaration_if_else','syntax.py',70),
  ('else_part -> ELSE LBRACE declarations RBRACE','else_part',4,'p_else_part_else','syntax.py',75),
  ('else_part -> ELSE IF LPAREN expression RPAREN LBRACE declarations RBRACE else_part','else_part',9,'p_else_part_elseif','syntax.py',80),
  ('else_part -> <empty>','else_part',0,'p_else_part_empty','syntax.py',85),
  ('declaration -> FOR LPAREN for_init SEMICOLON for_cond SEMICOLON for_iter RPAREN LBRACE declarations RBRACE','declaration',11,'p_declaration_for','syntax.py',91),
  ('for_init -> type ID ASSIGN expression','for_init',4,'p_for_init_decl','syntax.py',97),
  ('for_init -> ID ASSIGN expression','for_init',3,'p_for_init_assign','syntax.py',101),
  ('for_init -> expression','for_init',1,'p_for_init_expr','syntax.py',105),
  ('for_init -> <empty>','for_init',0,'p_for_init_empty','syntax.py',109),
  ('for_cond -> expression','for_cond',1,'p_for_cond_expr','syntax.py',114),
  ('for_cond -> <empty>','for_cond',0,'p_for_cond_empty','syntax.py',118),
  ('for_iter -> ID ASSIGN expression','for_iter',3,'p_for_iter_assign','syntax.py',123),
  ('for_iter -> expression','for_iter',1,'p_for_iter_expr','syntax.py',127),
  ('for_iter -> <empty>','for_iter',0,'p_for_iter_empty','syntax.py',131),
  ('type -> INT','type',1,'p_type','syntax.py',137),
  ('type -> FLOAT','type',1,'p_type','syntax.py',138),
  ('type -> BOOL','type',1,'p_type','syntax.py',139),
  ('type -> STRINGTYPE','type',1,'p_type','syntax.py',140),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','syntax.py',146),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','syntax.py',147),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','syntax.py',148),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','syntax.py',149),
  ('expression -> expression GT expression','expression',3,'p_expression_relop','syntax.py',153),
  ('expression -> expression LT expression','expression',3,'p_expression_relop','syntax.py',154),
  ('expression -> expression GE expression','expression',3,'p_expression_relop','syntax.py',155),
  ('expression -> expression LE expression','expression',3,'p_expression_relop','syntax.py',156),
  ('expression -> expression EQ expression','expression',3,'p_expression_relop','syntax.py',157),
  ('expression -> expression NE expression','expression',3,'p_expression_relop','syntax.py',158),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','syntax.py',162),
  ('expression -> INT_CONST','expression',1,'p_expression_number','syntax.py',166),
  ('expression -> FLOAT_CONST','expression',1,'p_expression_number','syntax.py',167),
  ('expression -> TRUE','expression',1,'p_expression_bool','syntax.py',171),
  ('expression -> FALSE','expression',1,'p_expression_bool','syntax.py',172),
  ('expression -> STRING_CONST','expression',1,'p_expression_string','syntax.py',176),
  ('expression -> ID','expression',1,'p_expression_id','syntax.py',180),
  ('expression -> MINUS expression','expression',2,'p_expression_negative','syntax.py',185),
  ('expression -> CONSOLE DOT READLINE LPAREN RPAREN','expression',5,'p_expression_readline','syntax.py',190),
  ('expression -> INT DOT PARSE LPAREN expression RPAREN','expression',6,'p_expression_parse_readline','syntax.py',195),
  ('expression -> expression AND expression','expression',3,'p_expression_and','syntax.py',200),
  ('expression -> expression OR expression','expression',3,'p_expression_or','syntax.py',205),
  ('expression -> NOT expression','expression',2,'p_expression_not','syntax.py',210),
  ('declaration -> type ID LPAREN params RPAREN LBRACE declarations RBRACE','declaration',8,'p_declaration_function','syntax.py',216),
  ('params -> params COMMA param','params',3,'p_params_multiple','syntax.py',221),
  ('params -> param','params',1,'p_params_single','syntax.py',225),
  ('params -> <empty>','params',0,'p_params_empty','syntax.py',229),
  ('param -> type ID','param',2,'p_param','syntax.py',233),
  ('expression -> ID LPAREN args RPAREN','expression',4,'p_expression_func_call','syntax.py',238),
  ('args -> args COMMA expression','args',3,'p_args_multiple','syntax.py',244),
  ('args -> expression','args',1,'p_args_single','syntax.py',248),
  ('args -> <empty>','args',0,'p_args_empty','syntax.py',252),
  ('declaration -> ID LPAREN args RPAREN SEMICOLON','declaration',5,'p_declaration_func_call','syntax.py',257),
  ('declaration -> RETURN expression SEMICOLON','declaration',3,'p_declaration_return','syntax.py',264),
]
