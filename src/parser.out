Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ADD
    AMPERSAND
    APOSTROPHE
    ARROW
    AS
    BASE
    BYTE
    CASE
    CATCH
    CHECKED
    COLON
    COMMENT
    CONST
    DECIMAL
    DECREMENT
    DELEGATE
    DO
    DOT
    ENUM
    EVENT
    EXPLICIT
    EXTERN
    FINALLY
    FIXED
    FOREACH
    GET
    IMPLICIT
    INCREMENT
    INTERFACE
    IS
    LBRACKET
    LIST
    LOCK
    LONG
    NAMESPACE
    NEW
    OBJECT
    OPERATOR
    OUT
    OVERRIDE
    PARAMS
    PARTIAL
    PIPE
    PROTECTED
    QUESTION
    QUOTE
    RBRACKET
    READONLY
    REF
    REMOVE
    SBYTE
    SET
    SHORT
    SIZEOF
    STACKALLOC
    STATIC
    STRUCT
    SWITCH
    THIS
    THROW
    TRY
    TYPEOF
    UINT
    ULONG
    UNCHECKED
    USHORT
    USING
    VIRTUAL
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> class_list
Rule 2     class_list -> class_list class_decl
Rule 3     class_list -> class_decl
Rule 4     class_decl -> class_modifiers CLASS ID LBRACE class_body RBRACE
Rule 5     class_decl -> CLASS ID LBRACE class_body RBRACE
Rule 6     class_modifiers -> class_modifiers class_modifier
Rule 7     class_modifiers -> class_modifier
Rule 8     class_modifier -> PUBLIC
Rule 9     class_modifier -> PRIVATE
Rule 10    class_body -> class_body class_member
Rule 11    class_body -> class_member
Rule 12    class_body -> empty
Rule 13    class_member -> member_modifiers var_declaration
Rule 14    class_member -> member_modifiers function_declaration
Rule 15    class_member -> constructor_declaration
Rule 16    class_member -> SEMICOLON
Rule 17    member_modifiers -> member_modifiers member_modifier
Rule 18    member_modifiers -> member_modifier
Rule 19    member_modifiers -> empty
Rule 20    member_modifier -> PUBLIC
Rule 21    member_modifier -> PRIVATE
Rule 22    constructor_declaration -> ID LPAREN parameter_list RPAREN block
Rule 23    var_declaration -> type ID SEMICOLON
Rule 24    var_declaration -> type ID EQUALS expression SEMICOLON
Rule 25    type -> INT
Rule 26    type -> FLOAT
Rule 27    type -> DOUBLE
Rule 28    type -> STRINGTYPE
Rule 29    type -> BOOL
Rule 30    type -> CHAR
Rule 31    type -> VAR
Rule 32    type -> ID
Rule 33    function_declaration -> type ID LPAREN parameter_list RPAREN block
Rule 34    function_declaration -> VOID ID LPAREN parameter_list RPAREN block
Rule 35    parameter_list -> parameter_list COMMA parameter
Rule 36    parameter_list -> parameter
Rule 37    parameter_list -> empty
Rule 38    parameter -> type ID
Rule 39    block -> LBRACE statement_list RBRACE
Rule 40    statement_list -> statement_list statement
Rule 41    statement_list -> statement
Rule 42    statement_list -> empty
Rule 43    statement -> var_declaration
Rule 44    statement -> assignment
Rule 45    statement -> function_call SEMICOLON
Rule 46    statement -> if_statement
Rule 47    statement -> while_statement
Rule 48    statement -> for_statement
Rule 49    statement -> return_statement
Rule 50    statement -> break_statement
Rule 51    statement -> continue_statement
Rule 52    statement -> block
Rule 53    statement -> SEMICOLON
Rule 54    assignment -> ID EQUALS expression SEMICOLON
Rule 55    assignment -> ID PLUSEQ expression SEMICOLON
Rule 56    assignment -> ID MINUSEQ expression SEMICOLON
Rule 57    assignment -> ID TIMESEQ expression SEMICOLON
Rule 58    assignment -> ID DIVEQ expression SEMICOLON
Rule 59    assignment -> ID MODEQ expression SEMICOLON
Rule 60    function_call -> ID LPAREN argument_list RPAREN
Rule 61    argument_list -> argument_list COMMA expression
Rule 62    argument_list -> expression
Rule 63    argument_list -> empty
Rule 64    if_statement -> IF LPAREN expression RPAREN statement else_clause
Rule 65    else_clause -> ELSE statement
Rule 66    else_clause -> empty
Rule 67    while_statement -> WHILE LPAREN expression RPAREN statement
Rule 68    for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement
Rule 69    for_init -> var_declaration
Rule 70    for_init -> assignment
Rule 71    for_init -> empty
Rule 72    for_condition -> expression
Rule 73    for_condition -> empty
Rule 74    for_iter -> assignment
Rule 75    for_iter -> empty
Rule 76    return_statement -> RETURN expression SEMICOLON
Rule 77    return_statement -> RETURN SEMICOLON
Rule 78    break_statement -> BREAK SEMICOLON
Rule 79    continue_statement -> CONTINUE SEMICOLON
Rule 80    expression -> literal
Rule 81    expression -> ID
Rule 82    expression -> function_call
Rule 83    expression -> expression PLUS expression
Rule 84    expression -> expression MINUS expression
Rule 85    expression -> expression TIMES expression
Rule 86    expression -> expression DIVIDE expression
Rule 87    expression -> expression MOD expression
Rule 88    expression -> expression LT expression
Rule 89    expression -> expression GT expression
Rule 90    expression -> expression LE expression
Rule 91    expression -> expression GE expression
Rule 92    expression -> expression EQ expression
Rule 93    expression -> expression NE expression
Rule 94    expression -> expression AND expression
Rule 95    expression -> expression OR expression
Rule 96    expression -> MINUS expression
Rule 97    expression -> NOT expression
Rule 98    expression -> LPAREN expression RPAREN
Rule 99    literal -> INT
Rule 100   literal -> FLOAT
Rule 101   literal -> DOUBLE
Rule 102   literal -> STRING
Rule 103   literal -> TRUE
Rule 104   literal -> FALSE
Rule 105   literal -> CHAR
Rule 106   literal -> NULL
Rule 107   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
ADD                  : 
AMPERSAND            : 
AND                  : 94
APOSTROPHE           : 
ARROW                : 
AS                   : 
BASE                 : 
BOOL                 : 29
BREAK                : 78
BYTE                 : 
CASE                 : 
CATCH                : 
CHAR                 : 30 105
CHECKED              : 
CLASS                : 4 5
COLON                : 
COMMA                : 35 61
COMMENT              : 
CONST                : 
CONTINUE             : 79
DECIMAL              : 
DECREMENT            : 
DELEGATE             : 
DIVEQ                : 58
DIVIDE               : 86
DO                   : 
DOT                  : 
DOUBLE               : 27 101
ELSE                 : 65
ENUM                 : 
EQ                   : 92
EQUALS               : 24 54
EVENT                : 
EXPLICIT             : 
EXTERN               : 
FALSE                : 104
FINALLY              : 
FIXED                : 
FLOAT                : 26 100
FOR                  : 68
FOREACH              : 
GE                   : 91
GET                  : 
GT                   : 89
ID                   : 4 5 22 23 24 32 33 34 38 54 55 56 57 58 59 60 81
IF                   : 64
IMPLICIT             : 
INCREMENT            : 
INT                  : 25 99
INTERFACE            : 
IS                   : 
LBRACE               : 4 5 39
LBRACKET             : 
LE                   : 90
LIST                 : 
LOCK                 : 
LONG                 : 
LPAREN               : 22 33 34 60 64 67 68 98
LT                   : 88
MINUS                : 84 96
MINUSEQ              : 56
MOD                  : 87
MODEQ                : 59
NAMESPACE            : 
NE                   : 93
NEW                  : 
NOT                  : 97
NULL                 : 106
OBJECT               : 
OPERATOR             : 
OR                   : 95
OUT                  : 
OVERRIDE             : 
PARAMS               : 
PARTIAL              : 
PIPE                 : 
PLUS                 : 83
PLUSEQ               : 55
PRIVATE              : 9 21
PROTECTED            : 
PUBLIC               : 8 20
QUESTION             : 
QUOTE                : 
RBRACE               : 4 5 39
RBRACKET             : 
READONLY             : 
REF                  : 
REMOVE               : 
RETURN               : 76 77
RPAREN               : 22 33 34 60 64 67 68 98
SBYTE                : 
SEMICOLON            : 16 23 24 45 53 54 55 56 57 58 59 68 68 76 77 78 79
SET                  : 
SHORT                : 
SIZEOF               : 
STACKALLOC           : 
STATIC               : 
STRING               : 102
STRINGTYPE           : 28
STRUCT               : 
SWITCH               : 
THIS                 : 
THROW                : 
TIMES                : 85
TIMESEQ              : 57
TRUE                 : 103
TRY                  : 
TYPEOF               : 
UINT                 : 
ULONG                : 
UNCHECKED            : 
USHORT               : 
USING                : 
VAR                  : 31
VIRTUAL              : 
VOID                 : 34
WHILE                : 67
YIELD                : 
error                : 

Nonterminals, with rules where they appear

argument_list        : 60 61
assignment           : 44 70 74
block                : 22 33 34 52
break_statement      : 50
class_body           : 4 5 10
class_decl           : 2 3
class_list           : 1 2
class_member         : 10 11
class_modifier       : 6 7
class_modifiers      : 4 6
constructor_declaration : 15
continue_statement   : 51
else_clause          : 64
empty                : 12 19 37 42 63 66 71 73 75
expression           : 24 54 55 56 57 58 59 61 62 64 67 72 76 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 97 98
for_condition        : 68
for_init             : 68
for_iter             : 68
for_statement        : 48
function_call        : 45 82
function_declaration : 14
if_statement         : 46
literal              : 80
member_modifier      : 17 18
member_modifiers     : 13 14 17
parameter            : 35 36
parameter_list       : 22 33 34 35
program              : 0
return_statement     : 49
statement            : 40 41 64 65 67 68
statement_list       : 39 40
type                 : 23 24 33 38
var_declaration      : 13 43 69
while_statement      : 47

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . class_list
    (2) class_list -> . class_list class_decl
    (3) class_list -> . class_decl
    (4) class_decl -> . class_modifiers CLASS ID LBRACE class_body RBRACE
    (5) class_decl -> . CLASS ID LBRACE class_body RBRACE
    (6) class_modifiers -> . class_modifiers class_modifier
    (7) class_modifiers -> . class_modifier
    (8) class_modifier -> . PUBLIC
    (9) class_modifier -> . PRIVATE

    CLASS           shift and go to state 5
    PUBLIC          shift and go to state 7
    PRIVATE         shift and go to state 8

    program                        shift and go to state 1
    class_list                     shift and go to state 2
    class_decl                     shift and go to state 3
    class_modifiers                shift and go to state 4
    class_modifier                 shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> class_list .
    (2) class_list -> class_list . class_decl
    (4) class_decl -> . class_modifiers CLASS ID LBRACE class_body RBRACE
    (5) class_decl -> . CLASS ID LBRACE class_body RBRACE
    (6) class_modifiers -> . class_modifiers class_modifier
    (7) class_modifiers -> . class_modifier
    (8) class_modifier -> . PUBLIC
    (9) class_modifier -> . PRIVATE

    $end            reduce using rule 1 (program -> class_list .)
    CLASS           shift and go to state 5
    PUBLIC          shift and go to state 7
    PRIVATE         shift and go to state 8

    class_decl                     shift and go to state 9
    class_modifiers                shift and go to state 4
    class_modifier                 shift and go to state 6

state 3

    (3) class_list -> class_decl .

    CLASS           reduce using rule 3 (class_list -> class_decl .)
    PUBLIC          reduce using rule 3 (class_list -> class_decl .)
    PRIVATE         reduce using rule 3 (class_list -> class_decl .)
    $end            reduce using rule 3 (class_list -> class_decl .)


state 4

    (4) class_decl -> class_modifiers . CLASS ID LBRACE class_body RBRACE
    (6) class_modifiers -> class_modifiers . class_modifier
    (8) class_modifier -> . PUBLIC
    (9) class_modifier -> . PRIVATE

    CLASS           shift and go to state 10
    PUBLIC          shift and go to state 7
    PRIVATE         shift and go to state 8

    class_modifier                 shift and go to state 11

state 5

    (5) class_decl -> CLASS . ID LBRACE class_body RBRACE

    ID              shift and go to state 12


state 6

    (7) class_modifiers -> class_modifier .

    CLASS           reduce using rule 7 (class_modifiers -> class_modifier .)
    PUBLIC          reduce using rule 7 (class_modifiers -> class_modifier .)
    PRIVATE         reduce using rule 7 (class_modifiers -> class_modifier .)


state 7

    (8) class_modifier -> PUBLIC .

    CLASS           reduce using rule 8 (class_modifier -> PUBLIC .)
    PUBLIC          reduce using rule 8 (class_modifier -> PUBLIC .)
    PRIVATE         reduce using rule 8 (class_modifier -> PUBLIC .)


state 8

    (9) class_modifier -> PRIVATE .

    CLASS           reduce using rule 9 (class_modifier -> PRIVATE .)
    PUBLIC          reduce using rule 9 (class_modifier -> PRIVATE .)
    PRIVATE         reduce using rule 9 (class_modifier -> PRIVATE .)


state 9

    (2) class_list -> class_list class_decl .

    CLASS           reduce using rule 2 (class_list -> class_list class_decl .)
    PUBLIC          reduce using rule 2 (class_list -> class_list class_decl .)
    PRIVATE         reduce using rule 2 (class_list -> class_list class_decl .)
    $end            reduce using rule 2 (class_list -> class_list class_decl .)


state 10

    (4) class_decl -> class_modifiers CLASS . ID LBRACE class_body RBRACE

    ID              shift and go to state 13


state 11

    (6) class_modifiers -> class_modifiers class_modifier .

    CLASS           reduce using rule 6 (class_modifiers -> class_modifiers class_modifier .)
    PUBLIC          reduce using rule 6 (class_modifiers -> class_modifiers class_modifier .)
    PRIVATE         reduce using rule 6 (class_modifiers -> class_modifiers class_modifier .)


state 12

    (5) class_decl -> CLASS ID . LBRACE class_body RBRACE

    LBRACE          shift and go to state 14


state 13

    (4) class_decl -> class_modifiers CLASS ID . LBRACE class_body RBRACE

    LBRACE          shift and go to state 15


state 14

    (5) class_decl -> CLASS ID LBRACE . class_body RBRACE
    (10) class_body -> . class_body class_member
    (11) class_body -> . class_member
    (12) class_body -> . empty
    (13) class_member -> . member_modifiers var_declaration
    (14) class_member -> . member_modifiers function_declaration
    (15) class_member -> . constructor_declaration
    (16) class_member -> . SEMICOLON
    (107) empty -> .
    (17) member_modifiers -> . member_modifiers member_modifier
    (18) member_modifiers -> . member_modifier
    (19) member_modifiers -> . empty
    (22) constructor_declaration -> . ID LPAREN parameter_list RPAREN block
    (20) member_modifier -> . PUBLIC
    (21) member_modifier -> . PRIVATE

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    SEMICOLON       shift and go to state 22
    RBRACE          reduce using rule 107 (empty -> .)
    VOID            reduce using rule 107 (empty -> .)
    INT             reduce using rule 107 (empty -> .)
    FLOAT           reduce using rule 107 (empty -> .)
    DOUBLE          reduce using rule 107 (empty -> .)
    STRINGTYPE      reduce using rule 107 (empty -> .)
    BOOL            reduce using rule 107 (empty -> .)
    CHAR            reduce using rule 107 (empty -> .)
    VAR             reduce using rule 107 (empty -> .)
    ID              shift and go to state 16
    PUBLIC          shift and go to state 24
    PRIVATE         shift and go to state 25

  ! SEMICOLON       [ reduce using rule 107 (empty -> .) ]
  ! ID              [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]

    class_body                     shift and go to state 17
    class_member                   shift and go to state 18
    empty                          shift and go to state 19
    member_modifiers               shift and go to state 20
    constructor_declaration        shift and go to state 21
    member_modifier                shift and go to state 23

state 15

    (4) class_decl -> class_modifiers CLASS ID LBRACE . class_body RBRACE
    (10) class_body -> . class_body class_member
    (11) class_body -> . class_member
    (12) class_body -> . empty
    (13) class_member -> . member_modifiers var_declaration
    (14) class_member -> . member_modifiers function_declaration
    (15) class_member -> . constructor_declaration
    (16) class_member -> . SEMICOLON
    (107) empty -> .
    (17) member_modifiers -> . member_modifiers member_modifier
    (18) member_modifiers -> . member_modifier
    (19) member_modifiers -> . empty
    (22) constructor_declaration -> . ID LPAREN parameter_list RPAREN block
    (20) member_modifier -> . PUBLIC
    (21) member_modifier -> . PRIVATE

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    SEMICOLON       shift and go to state 22
    RBRACE          reduce using rule 107 (empty -> .)
    VOID            reduce using rule 107 (empty -> .)
    INT             reduce using rule 107 (empty -> .)
    FLOAT           reduce using rule 107 (empty -> .)
    DOUBLE          reduce using rule 107 (empty -> .)
    STRINGTYPE      reduce using rule 107 (empty -> .)
    BOOL            reduce using rule 107 (empty -> .)
    CHAR            reduce using rule 107 (empty -> .)
    VAR             reduce using rule 107 (empty -> .)
    ID              shift and go to state 16
    PUBLIC          shift and go to state 24
    PRIVATE         shift and go to state 25

  ! SEMICOLON       [ reduce using rule 107 (empty -> .) ]
  ! ID              [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]

    class_body                     shift and go to state 26
    class_member                   shift and go to state 18
    empty                          shift and go to state 19
    member_modifiers               shift and go to state 20
    constructor_declaration        shift and go to state 21
    member_modifier                shift and go to state 23

state 16

    (22) constructor_declaration -> ID . LPAREN parameter_list RPAREN block

    LPAREN          shift and go to state 27


state 17

    (5) class_decl -> CLASS ID LBRACE class_body . RBRACE
    (10) class_body -> class_body . class_member
    (13) class_member -> . member_modifiers var_declaration
    (14) class_member -> . member_modifiers function_declaration
    (15) class_member -> . constructor_declaration
    (16) class_member -> . SEMICOLON
    (17) member_modifiers -> . member_modifiers member_modifier
    (18) member_modifiers -> . member_modifier
    (19) member_modifiers -> . empty
    (22) constructor_declaration -> . ID LPAREN parameter_list RPAREN block
    (20) member_modifier -> . PUBLIC
    (21) member_modifier -> . PRIVATE
    (107) empty -> .

  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    RBRACE          shift and go to state 28
    SEMICOLON       shift and go to state 22
    ID              shift and go to state 16
    PUBLIC          shift and go to state 24
    PRIVATE         shift and go to state 25
    VOID            reduce using rule 107 (empty -> .)
    INT             reduce using rule 107 (empty -> .)
    FLOAT           reduce using rule 107 (empty -> .)
    DOUBLE          reduce using rule 107 (empty -> .)
    STRINGTYPE      reduce using rule 107 (empty -> .)
    BOOL            reduce using rule 107 (empty -> .)
    CHAR            reduce using rule 107 (empty -> .)
    VAR             reduce using rule 107 (empty -> .)

  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]
  ! ID              [ reduce using rule 107 (empty -> .) ]

    class_member                   shift and go to state 29
    member_modifiers               shift and go to state 20
    constructor_declaration        shift and go to state 21
    member_modifier                shift and go to state 23
    empty                          shift and go to state 30

state 18

    (11) class_body -> class_member .

    RBRACE          reduce using rule 11 (class_body -> class_member .)
    SEMICOLON       reduce using rule 11 (class_body -> class_member .)
    ID              reduce using rule 11 (class_body -> class_member .)
    PUBLIC          reduce using rule 11 (class_body -> class_member .)
    PRIVATE         reduce using rule 11 (class_body -> class_member .)
    VOID            reduce using rule 11 (class_body -> class_member .)
    INT             reduce using rule 11 (class_body -> class_member .)
    FLOAT           reduce using rule 11 (class_body -> class_member .)
    DOUBLE          reduce using rule 11 (class_body -> class_member .)
    STRINGTYPE      reduce using rule 11 (class_body -> class_member .)
    BOOL            reduce using rule 11 (class_body -> class_member .)
    CHAR            reduce using rule 11 (class_body -> class_member .)
    VAR             reduce using rule 11 (class_body -> class_member .)


state 19

    (12) class_body -> empty .
    (19) member_modifiers -> empty .

  ! reduce/reduce conflict for VOID resolved using rule 12 (class_body -> empty .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 12 (class_body -> empty .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 12 (class_body -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 12 (class_body -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 12 (class_body -> empty .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 12 (class_body -> empty .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 12 (class_body -> empty .)
  ! reduce/reduce conflict for BOOL resolved using rule 12 (class_body -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 12 (class_body -> empty .)
  ! reduce/reduce conflict for VAR resolved using rule 12 (class_body -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 12 (class_body -> empty .)
    RBRACE          reduce using rule 12 (class_body -> empty .)
    SEMICOLON       reduce using rule 12 (class_body -> empty .)
    ID              reduce using rule 12 (class_body -> empty .)
    PUBLIC          reduce using rule 12 (class_body -> empty .)
    PRIVATE         reduce using rule 12 (class_body -> empty .)
    VOID            reduce using rule 12 (class_body -> empty .)
    INT             reduce using rule 12 (class_body -> empty .)
    FLOAT           reduce using rule 12 (class_body -> empty .)
    DOUBLE          reduce using rule 12 (class_body -> empty .)
    STRINGTYPE      reduce using rule 12 (class_body -> empty .)
    BOOL            reduce using rule 12 (class_body -> empty .)
    CHAR            reduce using rule 12 (class_body -> empty .)
    VAR             reduce using rule 12 (class_body -> empty .)

  ! VOID            [ reduce using rule 19 (member_modifiers -> empty .) ]
  ! PUBLIC          [ reduce using rule 19 (member_modifiers -> empty .) ]
  ! PRIVATE         [ reduce using rule 19 (member_modifiers -> empty .) ]
  ! INT             [ reduce using rule 19 (member_modifiers -> empty .) ]
  ! FLOAT           [ reduce using rule 19 (member_modifiers -> empty .) ]
  ! DOUBLE          [ reduce using rule 19 (member_modifiers -> empty .) ]
  ! STRINGTYPE      [ reduce using rule 19 (member_modifiers -> empty .) ]
  ! BOOL            [ reduce using rule 19 (member_modifiers -> empty .) ]
  ! CHAR            [ reduce using rule 19 (member_modifiers -> empty .) ]
  ! VAR             [ reduce using rule 19 (member_modifiers -> empty .) ]
  ! ID              [ reduce using rule 19 (member_modifiers -> empty .) ]


state 20

    (13) class_member -> member_modifiers . var_declaration
    (14) class_member -> member_modifiers . function_declaration
    (17) member_modifiers -> member_modifiers . member_modifier
    (23) var_declaration -> . type ID SEMICOLON
    (24) var_declaration -> . type ID EQUALS expression SEMICOLON
    (33) function_declaration -> . type ID LPAREN parameter_list RPAREN block
    (34) function_declaration -> . VOID ID LPAREN parameter_list RPAREN block
    (20) member_modifier -> . PUBLIC
    (21) member_modifier -> . PRIVATE
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . DOUBLE
    (28) type -> . STRINGTYPE
    (29) type -> . BOOL
    (30) type -> . CHAR
    (31) type -> . VAR
    (32) type -> . ID

    VOID            shift and go to state 36
    PUBLIC          shift and go to state 24
    PRIVATE         shift and go to state 25
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    DOUBLE          shift and go to state 39
    STRINGTYPE      shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    VAR             shift and go to state 43
    ID              shift and go to state 35

    var_declaration                shift and go to state 31
    function_declaration           shift and go to state 32
    member_modifier                shift and go to state 33
    type                           shift and go to state 34

state 21

    (15) class_member -> constructor_declaration .

    RBRACE          reduce using rule 15 (class_member -> constructor_declaration .)
    SEMICOLON       reduce using rule 15 (class_member -> constructor_declaration .)
    ID              reduce using rule 15 (class_member -> constructor_declaration .)
    PUBLIC          reduce using rule 15 (class_member -> constructor_declaration .)
    PRIVATE         reduce using rule 15 (class_member -> constructor_declaration .)
    VOID            reduce using rule 15 (class_member -> constructor_declaration .)
    INT             reduce using rule 15 (class_member -> constructor_declaration .)
    FLOAT           reduce using rule 15 (class_member -> constructor_declaration .)
    DOUBLE          reduce using rule 15 (class_member -> constructor_declaration .)
    STRINGTYPE      reduce using rule 15 (class_member -> constructor_declaration .)
    BOOL            reduce using rule 15 (class_member -> constructor_declaration .)
    CHAR            reduce using rule 15 (class_member -> constructor_declaration .)
    VAR             reduce using rule 15 (class_member -> constructor_declaration .)


state 22

    (16) class_member -> SEMICOLON .

    RBRACE          reduce using rule 16 (class_member -> SEMICOLON .)
    SEMICOLON       reduce using rule 16 (class_member -> SEMICOLON .)
    ID              reduce using rule 16 (class_member -> SEMICOLON .)
    PUBLIC          reduce using rule 16 (class_member -> SEMICOLON .)
    PRIVATE         reduce using rule 16 (class_member -> SEMICOLON .)
    VOID            reduce using rule 16 (class_member -> SEMICOLON .)
    INT             reduce using rule 16 (class_member -> SEMICOLON .)
    FLOAT           reduce using rule 16 (class_member -> SEMICOLON .)
    DOUBLE          reduce using rule 16 (class_member -> SEMICOLON .)
    STRINGTYPE      reduce using rule 16 (class_member -> SEMICOLON .)
    BOOL            reduce using rule 16 (class_member -> SEMICOLON .)
    CHAR            reduce using rule 16 (class_member -> SEMICOLON .)
    VAR             reduce using rule 16 (class_member -> SEMICOLON .)


state 23

    (18) member_modifiers -> member_modifier .

    VOID            reduce using rule 18 (member_modifiers -> member_modifier .)
    PUBLIC          reduce using rule 18 (member_modifiers -> member_modifier .)
    PRIVATE         reduce using rule 18 (member_modifiers -> member_modifier .)
    INT             reduce using rule 18 (member_modifiers -> member_modifier .)
    FLOAT           reduce using rule 18 (member_modifiers -> member_modifier .)
    DOUBLE          reduce using rule 18 (member_modifiers -> member_modifier .)
    STRINGTYPE      reduce using rule 18 (member_modifiers -> member_modifier .)
    BOOL            reduce using rule 18 (member_modifiers -> member_modifier .)
    CHAR            reduce using rule 18 (member_modifiers -> member_modifier .)
    VAR             reduce using rule 18 (member_modifiers -> member_modifier .)
    ID              reduce using rule 18 (member_modifiers -> member_modifier .)


state 24

    (20) member_modifier -> PUBLIC .

    VOID            reduce using rule 20 (member_modifier -> PUBLIC .)
    PUBLIC          reduce using rule 20 (member_modifier -> PUBLIC .)
    PRIVATE         reduce using rule 20 (member_modifier -> PUBLIC .)
    INT             reduce using rule 20 (member_modifier -> PUBLIC .)
    FLOAT           reduce using rule 20 (member_modifier -> PUBLIC .)
    DOUBLE          reduce using rule 20 (member_modifier -> PUBLIC .)
    STRINGTYPE      reduce using rule 20 (member_modifier -> PUBLIC .)
    BOOL            reduce using rule 20 (member_modifier -> PUBLIC .)
    CHAR            reduce using rule 20 (member_modifier -> PUBLIC .)
    VAR             reduce using rule 20 (member_modifier -> PUBLIC .)
    ID              reduce using rule 20 (member_modifier -> PUBLIC .)


state 25

    (21) member_modifier -> PRIVATE .

    VOID            reduce using rule 21 (member_modifier -> PRIVATE .)
    PUBLIC          reduce using rule 21 (member_modifier -> PRIVATE .)
    PRIVATE         reduce using rule 21 (member_modifier -> PRIVATE .)
    INT             reduce using rule 21 (member_modifier -> PRIVATE .)
    FLOAT           reduce using rule 21 (member_modifier -> PRIVATE .)
    DOUBLE          reduce using rule 21 (member_modifier -> PRIVATE .)
    STRINGTYPE      reduce using rule 21 (member_modifier -> PRIVATE .)
    BOOL            reduce using rule 21 (member_modifier -> PRIVATE .)
    CHAR            reduce using rule 21 (member_modifier -> PRIVATE .)
    VAR             reduce using rule 21 (member_modifier -> PRIVATE .)
    ID              reduce using rule 21 (member_modifier -> PRIVATE .)


state 26

    (4) class_decl -> class_modifiers CLASS ID LBRACE class_body . RBRACE
    (10) class_body -> class_body . class_member
    (13) class_member -> . member_modifiers var_declaration
    (14) class_member -> . member_modifiers function_declaration
    (15) class_member -> . constructor_declaration
    (16) class_member -> . SEMICOLON
    (17) member_modifiers -> . member_modifiers member_modifier
    (18) member_modifiers -> . member_modifier
    (19) member_modifiers -> . empty
    (22) constructor_declaration -> . ID LPAREN parameter_list RPAREN block
    (20) member_modifier -> . PUBLIC
    (21) member_modifier -> . PRIVATE
    (107) empty -> .

  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    RBRACE          shift and go to state 44
    SEMICOLON       shift and go to state 22
    ID              shift and go to state 16
    PUBLIC          shift and go to state 24
    PRIVATE         shift and go to state 25
    VOID            reduce using rule 107 (empty -> .)
    INT             reduce using rule 107 (empty -> .)
    FLOAT           reduce using rule 107 (empty -> .)
    DOUBLE          reduce using rule 107 (empty -> .)
    STRINGTYPE      reduce using rule 107 (empty -> .)
    BOOL            reduce using rule 107 (empty -> .)
    CHAR            reduce using rule 107 (empty -> .)
    VAR             reduce using rule 107 (empty -> .)

  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]
  ! ID              [ reduce using rule 107 (empty -> .) ]

    class_member                   shift and go to state 29
    member_modifiers               shift and go to state 20
    constructor_declaration        shift and go to state 21
    member_modifier                shift and go to state 23
    empty                          shift and go to state 30

state 27

    (22) constructor_declaration -> ID LPAREN . parameter_list RPAREN block
    (35) parameter_list -> . parameter_list COMMA parameter
    (36) parameter_list -> . parameter
    (37) parameter_list -> . empty
    (38) parameter -> . type ID
    (107) empty -> .
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . DOUBLE
    (28) type -> . STRINGTYPE
    (29) type -> . BOOL
    (30) type -> . CHAR
    (31) type -> . VAR
    (32) type -> . ID

    RPAREN          reduce using rule 107 (empty -> .)
    COMMA           reduce using rule 107 (empty -> .)
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    DOUBLE          shift and go to state 39
    STRINGTYPE      shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    VAR             shift and go to state 43
    ID              shift and go to state 35

    parameter_list                 shift and go to state 45
    parameter                      shift and go to state 46
    empty                          shift and go to state 47
    type                           shift and go to state 48

state 28

    (5) class_decl -> CLASS ID LBRACE class_body RBRACE .

    CLASS           reduce using rule 5 (class_decl -> CLASS ID LBRACE class_body RBRACE .)
    PUBLIC          reduce using rule 5 (class_decl -> CLASS ID LBRACE class_body RBRACE .)
    PRIVATE         reduce using rule 5 (class_decl -> CLASS ID LBRACE class_body RBRACE .)
    $end            reduce using rule 5 (class_decl -> CLASS ID LBRACE class_body RBRACE .)


state 29

    (10) class_body -> class_body class_member .

    RBRACE          reduce using rule 10 (class_body -> class_body class_member .)
    SEMICOLON       reduce using rule 10 (class_body -> class_body class_member .)
    ID              reduce using rule 10 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 10 (class_body -> class_body class_member .)
    PRIVATE         reduce using rule 10 (class_body -> class_body class_member .)
    VOID            reduce using rule 10 (class_body -> class_body class_member .)
    INT             reduce using rule 10 (class_body -> class_body class_member .)
    FLOAT           reduce using rule 10 (class_body -> class_body class_member .)
    DOUBLE          reduce using rule 10 (class_body -> class_body class_member .)
    STRINGTYPE      reduce using rule 10 (class_body -> class_body class_member .)
    BOOL            reduce using rule 10 (class_body -> class_body class_member .)
    CHAR            reduce using rule 10 (class_body -> class_body class_member .)
    VAR             reduce using rule 10 (class_body -> class_body class_member .)


state 30

    (19) member_modifiers -> empty .

    VOID            reduce using rule 19 (member_modifiers -> empty .)
    PUBLIC          reduce using rule 19 (member_modifiers -> empty .)
    PRIVATE         reduce using rule 19 (member_modifiers -> empty .)
    INT             reduce using rule 19 (member_modifiers -> empty .)
    FLOAT           reduce using rule 19 (member_modifiers -> empty .)
    DOUBLE          reduce using rule 19 (member_modifiers -> empty .)
    STRINGTYPE      reduce using rule 19 (member_modifiers -> empty .)
    BOOL            reduce using rule 19 (member_modifiers -> empty .)
    CHAR            reduce using rule 19 (member_modifiers -> empty .)
    VAR             reduce using rule 19 (member_modifiers -> empty .)
    ID              reduce using rule 19 (member_modifiers -> empty .)


state 31

    (13) class_member -> member_modifiers var_declaration .

    RBRACE          reduce using rule 13 (class_member -> member_modifiers var_declaration .)
    SEMICOLON       reduce using rule 13 (class_member -> member_modifiers var_declaration .)
    ID              reduce using rule 13 (class_member -> member_modifiers var_declaration .)
    PUBLIC          reduce using rule 13 (class_member -> member_modifiers var_declaration .)
    PRIVATE         reduce using rule 13 (class_member -> member_modifiers var_declaration .)
    VOID            reduce using rule 13 (class_member -> member_modifiers var_declaration .)
    INT             reduce using rule 13 (class_member -> member_modifiers var_declaration .)
    FLOAT           reduce using rule 13 (class_member -> member_modifiers var_declaration .)
    DOUBLE          reduce using rule 13 (class_member -> member_modifiers var_declaration .)
    STRINGTYPE      reduce using rule 13 (class_member -> member_modifiers var_declaration .)
    BOOL            reduce using rule 13 (class_member -> member_modifiers var_declaration .)
    CHAR            reduce using rule 13 (class_member -> member_modifiers var_declaration .)
    VAR             reduce using rule 13 (class_member -> member_modifiers var_declaration .)


state 32

    (14) class_member -> member_modifiers function_declaration .

    RBRACE          reduce using rule 14 (class_member -> member_modifiers function_declaration .)
    SEMICOLON       reduce using rule 14 (class_member -> member_modifiers function_declaration .)
    ID              reduce using rule 14 (class_member -> member_modifiers function_declaration .)
    PUBLIC          reduce using rule 14 (class_member -> member_modifiers function_declaration .)
    PRIVATE         reduce using rule 14 (class_member -> member_modifiers function_declaration .)
    VOID            reduce using rule 14 (class_member -> member_modifiers function_declaration .)
    INT             reduce using rule 14 (class_member -> member_modifiers function_declaration .)
    FLOAT           reduce using rule 14 (class_member -> member_modifiers function_declaration .)
    DOUBLE          reduce using rule 14 (class_member -> member_modifiers function_declaration .)
    STRINGTYPE      reduce using rule 14 (class_member -> member_modifiers function_declaration .)
    BOOL            reduce using rule 14 (class_member -> member_modifiers function_declaration .)
    CHAR            reduce using rule 14 (class_member -> member_modifiers function_declaration .)
    VAR             reduce using rule 14 (class_member -> member_modifiers function_declaration .)


state 33

    (17) member_modifiers -> member_modifiers member_modifier .

    VOID            reduce using rule 17 (member_modifiers -> member_modifiers member_modifier .)
    PUBLIC          reduce using rule 17 (member_modifiers -> member_modifiers member_modifier .)
    PRIVATE         reduce using rule 17 (member_modifiers -> member_modifiers member_modifier .)
    INT             reduce using rule 17 (member_modifiers -> member_modifiers member_modifier .)
    FLOAT           reduce using rule 17 (member_modifiers -> member_modifiers member_modifier .)
    DOUBLE          reduce using rule 17 (member_modifiers -> member_modifiers member_modifier .)
    STRINGTYPE      reduce using rule 17 (member_modifiers -> member_modifiers member_modifier .)
    BOOL            reduce using rule 17 (member_modifiers -> member_modifiers member_modifier .)
    CHAR            reduce using rule 17 (member_modifiers -> member_modifiers member_modifier .)
    VAR             reduce using rule 17 (member_modifiers -> member_modifiers member_modifier .)
    ID              reduce using rule 17 (member_modifiers -> member_modifiers member_modifier .)


state 34

    (23) var_declaration -> type . ID SEMICOLON
    (24) var_declaration -> type . ID EQUALS expression SEMICOLON
    (33) function_declaration -> type . ID LPAREN parameter_list RPAREN block

    ID              shift and go to state 49


state 35

    (32) type -> ID .

    ID              reduce using rule 32 (type -> ID .)


state 36

    (34) function_declaration -> VOID . ID LPAREN parameter_list RPAREN block

    ID              shift and go to state 50


state 37

    (25) type -> INT .

    ID              reduce using rule 25 (type -> INT .)


state 38

    (26) type -> FLOAT .

    ID              reduce using rule 26 (type -> FLOAT .)


state 39

    (27) type -> DOUBLE .

    ID              reduce using rule 27 (type -> DOUBLE .)


state 40

    (28) type -> STRINGTYPE .

    ID              reduce using rule 28 (type -> STRINGTYPE .)


state 41

    (29) type -> BOOL .

    ID              reduce using rule 29 (type -> BOOL .)


state 42

    (30) type -> CHAR .

    ID              reduce using rule 30 (type -> CHAR .)


state 43

    (31) type -> VAR .

    ID              reduce using rule 31 (type -> VAR .)


state 44

    (4) class_decl -> class_modifiers CLASS ID LBRACE class_body RBRACE .

    CLASS           reduce using rule 4 (class_decl -> class_modifiers CLASS ID LBRACE class_body RBRACE .)
    PUBLIC          reduce using rule 4 (class_decl -> class_modifiers CLASS ID LBRACE class_body RBRACE .)
    PRIVATE         reduce using rule 4 (class_decl -> class_modifiers CLASS ID LBRACE class_body RBRACE .)
    $end            reduce using rule 4 (class_decl -> class_modifiers CLASS ID LBRACE class_body RBRACE .)


state 45

    (22) constructor_declaration -> ID LPAREN parameter_list . RPAREN block
    (35) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 51
    COMMA           shift and go to state 52


state 46

    (36) parameter_list -> parameter .

    RPAREN          reduce using rule 36 (parameter_list -> parameter .)
    COMMA           reduce using rule 36 (parameter_list -> parameter .)


state 47

    (37) parameter_list -> empty .

    RPAREN          reduce using rule 37 (parameter_list -> empty .)
    COMMA           reduce using rule 37 (parameter_list -> empty .)


state 48

    (38) parameter -> type . ID

    ID              shift and go to state 53


state 49

    (23) var_declaration -> type ID . SEMICOLON
    (24) var_declaration -> type ID . EQUALS expression SEMICOLON
    (33) function_declaration -> type ID . LPAREN parameter_list RPAREN block

    SEMICOLON       shift and go to state 54
    EQUALS          shift and go to state 55
    LPAREN          shift and go to state 56


state 50

    (34) function_declaration -> VOID ID . LPAREN parameter_list RPAREN block

    LPAREN          shift and go to state 57


state 51

    (22) constructor_declaration -> ID LPAREN parameter_list RPAREN . block
    (39) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 59

    block                          shift and go to state 58

state 52

    (35) parameter_list -> parameter_list COMMA . parameter
    (38) parameter -> . type ID
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . DOUBLE
    (28) type -> . STRINGTYPE
    (29) type -> . BOOL
    (30) type -> . CHAR
    (31) type -> . VAR
    (32) type -> . ID

    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    DOUBLE          shift and go to state 39
    STRINGTYPE      shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    VAR             shift and go to state 43
    ID              shift and go to state 35

    parameter                      shift and go to state 60
    type                           shift and go to state 48

state 53

    (38) parameter -> type ID .

    RPAREN          reduce using rule 38 (parameter -> type ID .)
    COMMA           reduce using rule 38 (parameter -> type ID .)


state 54

    (23) var_declaration -> type ID SEMICOLON .

    RBRACE          reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    SEMICOLON       reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    ID              reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    PUBLIC          reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    PRIVATE         reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    VOID            reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    INT             reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    FLOAT           reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    DOUBLE          reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    STRINGTYPE      reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    BOOL            reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    CHAR            reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    VAR             reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    IF              reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    WHILE           reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    FOR             reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    RETURN          reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    BREAK           reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    CONTINUE        reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    LBRACE          reduce using rule 23 (var_declaration -> type ID SEMICOLON .)
    ELSE            reduce using rule 23 (var_declaration -> type ID SEMICOLON .)


state 55

    (24) var_declaration -> type ID EQUALS . expression SEMICOLON
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 62
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 56

    (33) function_declaration -> type ID LPAREN . parameter_list RPAREN block
    (35) parameter_list -> . parameter_list COMMA parameter
    (36) parameter_list -> . parameter
    (37) parameter_list -> . empty
    (38) parameter -> . type ID
    (107) empty -> .
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . DOUBLE
    (28) type -> . STRINGTYPE
    (29) type -> . BOOL
    (30) type -> . CHAR
    (31) type -> . VAR
    (32) type -> . ID

    RPAREN          reduce using rule 107 (empty -> .)
    COMMA           reduce using rule 107 (empty -> .)
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    DOUBLE          shift and go to state 39
    STRINGTYPE      shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    VAR             shift and go to state 43
    ID              shift and go to state 35

    type                           shift and go to state 48
    parameter_list                 shift and go to state 76
    parameter                      shift and go to state 46
    empty                          shift and go to state 47

state 57

    (34) function_declaration -> VOID ID LPAREN . parameter_list RPAREN block
    (35) parameter_list -> . parameter_list COMMA parameter
    (36) parameter_list -> . parameter
    (37) parameter_list -> . empty
    (38) parameter -> . type ID
    (107) empty -> .
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . DOUBLE
    (28) type -> . STRINGTYPE
    (29) type -> . BOOL
    (30) type -> . CHAR
    (31) type -> . VAR
    (32) type -> . ID

    RPAREN          reduce using rule 107 (empty -> .)
    COMMA           reduce using rule 107 (empty -> .)
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    DOUBLE          shift and go to state 39
    STRINGTYPE      shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    VAR             shift and go to state 43
    ID              shift and go to state 35

    parameter_list                 shift and go to state 77
    parameter                      shift and go to state 46
    empty                          shift and go to state 47
    type                           shift and go to state 48

state 58

    (22) constructor_declaration -> ID LPAREN parameter_list RPAREN block .

    RBRACE          reduce using rule 22 (constructor_declaration -> ID LPAREN parameter_list RPAREN block .)
    SEMICOLON       reduce using rule 22 (constructor_declaration -> ID LPAREN parameter_list RPAREN block .)
    ID              reduce using rule 22 (constructor_declaration -> ID LPAREN parameter_list RPAREN block .)
    PUBLIC          reduce using rule 22 (constructor_declaration -> ID LPAREN parameter_list RPAREN block .)
    PRIVATE         reduce using rule 22 (constructor_declaration -> ID LPAREN parameter_list RPAREN block .)
    VOID            reduce using rule 22 (constructor_declaration -> ID LPAREN parameter_list RPAREN block .)
    INT             reduce using rule 22 (constructor_declaration -> ID LPAREN parameter_list RPAREN block .)
    FLOAT           reduce using rule 22 (constructor_declaration -> ID LPAREN parameter_list RPAREN block .)
    DOUBLE          reduce using rule 22 (constructor_declaration -> ID LPAREN parameter_list RPAREN block .)
    STRINGTYPE      reduce using rule 22 (constructor_declaration -> ID LPAREN parameter_list RPAREN block .)
    BOOL            reduce using rule 22 (constructor_declaration -> ID LPAREN parameter_list RPAREN block .)
    CHAR            reduce using rule 22 (constructor_declaration -> ID LPAREN parameter_list RPAREN block .)
    VAR             reduce using rule 22 (constructor_declaration -> ID LPAREN parameter_list RPAREN block .)


state 59

    (39) block -> LBRACE . statement_list RBRACE
    (40) statement_list -> . statement_list statement
    (41) statement_list -> . statement
    (42) statement_list -> . empty
    (43) statement -> . var_declaration
    (44) statement -> . assignment
    (45) statement -> . function_call SEMICOLON
    (46) statement -> . if_statement
    (47) statement -> . while_statement
    (48) statement -> . for_statement
    (49) statement -> . return_statement
    (50) statement -> . break_statement
    (51) statement -> . continue_statement
    (52) statement -> . block
    (53) statement -> . SEMICOLON
    (107) empty -> .
    (23) var_declaration -> . type ID SEMICOLON
    (24) var_declaration -> . type ID EQUALS expression SEMICOLON
    (54) assignment -> . ID EQUALS expression SEMICOLON
    (55) assignment -> . ID PLUSEQ expression SEMICOLON
    (56) assignment -> . ID MINUSEQ expression SEMICOLON
    (57) assignment -> . ID TIMESEQ expression SEMICOLON
    (58) assignment -> . ID DIVEQ expression SEMICOLON
    (59) assignment -> . ID MODEQ expression SEMICOLON
    (60) function_call -> . ID LPAREN argument_list RPAREN
    (64) if_statement -> . IF LPAREN expression RPAREN statement else_clause
    (67) while_statement -> . WHILE LPAREN expression RPAREN statement
    (68) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement
    (76) return_statement -> . RETURN expression SEMICOLON
    (77) return_statement -> . RETURN SEMICOLON
    (78) break_statement -> . BREAK SEMICOLON
    (79) continue_statement -> . CONTINUE SEMICOLON
    (39) block -> . LBRACE statement_list RBRACE
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . DOUBLE
    (28) type -> . STRINGTYPE
    (29) type -> . BOOL
    (30) type -> . CHAR
    (31) type -> . VAR
    (32) type -> . ID

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRINGTYPE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    SEMICOLON       shift and go to state 84
    RBRACE          reduce using rule 107 (empty -> .)
    ID              shift and go to state 93
    IF              shift and go to state 94
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    RETURN          shift and go to state 97
    BREAK           shift and go to state 98
    CONTINUE        shift and go to state 99
    LBRACE          shift and go to state 59
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    DOUBLE          shift and go to state 39
    STRINGTYPE      shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    VAR             shift and go to state 43

  ! SEMICOLON       [ reduce using rule 107 (empty -> .) ]
  ! ID              [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! FOR             [ reduce using rule 107 (empty -> .) ]
  ! RETURN          [ reduce using rule 107 (empty -> .) ]
  ! BREAK           [ reduce using rule 107 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 107 (empty -> .) ]
  ! LBRACE          [ reduce using rule 107 (empty -> .) ]
  ! INT             [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 107 (empty -> .) ]
  ! STRINGTYPE      [ reduce using rule 107 (empty -> .) ]
  ! BOOL            [ reduce using rule 107 (empty -> .) ]
  ! CHAR            [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]

    statement_list                 shift and go to state 78
    statement                      shift and go to state 79
    empty                          shift and go to state 80
    var_declaration                shift and go to state 81
    assignment                     shift and go to state 82
    function_call                  shift and go to state 83
    if_statement                   shift and go to state 85
    while_statement                shift and go to state 86
    for_statement                  shift and go to state 87
    return_statement               shift and go to state 88
    break_statement                shift and go to state 89
    continue_statement             shift and go to state 90
    block                          shift and go to state 91
    type                           shift and go to state 92

state 60

    (35) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 35 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 35 (parameter_list -> parameter_list COMMA parameter .)


state 61

    (81) expression -> ID .
    (60) function_call -> ID . LPAREN argument_list RPAREN

    SEMICOLON       reduce using rule 81 (expression -> ID .)
    PLUS            reduce using rule 81 (expression -> ID .)
    MINUS           reduce using rule 81 (expression -> ID .)
    TIMES           reduce using rule 81 (expression -> ID .)
    DIVIDE          reduce using rule 81 (expression -> ID .)
    MOD             reduce using rule 81 (expression -> ID .)
    LT              reduce using rule 81 (expression -> ID .)
    GT              reduce using rule 81 (expression -> ID .)
    LE              reduce using rule 81 (expression -> ID .)
    GE              reduce using rule 81 (expression -> ID .)
    EQ              reduce using rule 81 (expression -> ID .)
    NE              reduce using rule 81 (expression -> ID .)
    AND             reduce using rule 81 (expression -> ID .)
    OR              reduce using rule 81 (expression -> ID .)
    RPAREN          reduce using rule 81 (expression -> ID .)
    COMMA           reduce using rule 81 (expression -> ID .)
    LPAREN          shift and go to state 100


state 62

    (24) var_declaration -> type ID EQUALS expression . SEMICOLON
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 63

    (80) expression -> literal .

    SEMICOLON       reduce using rule 80 (expression -> literal .)
    PLUS            reduce using rule 80 (expression -> literal .)
    MINUS           reduce using rule 80 (expression -> literal .)
    TIMES           reduce using rule 80 (expression -> literal .)
    DIVIDE          reduce using rule 80 (expression -> literal .)
    MOD             reduce using rule 80 (expression -> literal .)
    LT              reduce using rule 80 (expression -> literal .)
    GT              reduce using rule 80 (expression -> literal .)
    LE              reduce using rule 80 (expression -> literal .)
    GE              reduce using rule 80 (expression -> literal .)
    EQ              reduce using rule 80 (expression -> literal .)
    NE              reduce using rule 80 (expression -> literal .)
    AND             reduce using rule 80 (expression -> literal .)
    OR              reduce using rule 80 (expression -> literal .)
    RPAREN          reduce using rule 80 (expression -> literal .)
    COMMA           reduce using rule 80 (expression -> literal .)


state 64

    (82) expression -> function_call .

    SEMICOLON       reduce using rule 82 (expression -> function_call .)
    PLUS            reduce using rule 82 (expression -> function_call .)
    MINUS           reduce using rule 82 (expression -> function_call .)
    TIMES           reduce using rule 82 (expression -> function_call .)
    DIVIDE          reduce using rule 82 (expression -> function_call .)
    MOD             reduce using rule 82 (expression -> function_call .)
    LT              reduce using rule 82 (expression -> function_call .)
    GT              reduce using rule 82 (expression -> function_call .)
    LE              reduce using rule 82 (expression -> function_call .)
    GE              reduce using rule 82 (expression -> function_call .)
    EQ              reduce using rule 82 (expression -> function_call .)
    NE              reduce using rule 82 (expression -> function_call .)
    AND             reduce using rule 82 (expression -> function_call .)
    OR              reduce using rule 82 (expression -> function_call .)
    RPAREN          reduce using rule 82 (expression -> function_call .)
    COMMA           reduce using rule 82 (expression -> function_call .)


state 65

    (96) expression -> MINUS . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 115
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 66

    (97) expression -> NOT . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 116
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 67

    (98) expression -> LPAREN . expression RPAREN
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 117
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 68

    (99) literal -> INT .

    SEMICOLON       reduce using rule 99 (literal -> INT .)
    PLUS            reduce using rule 99 (literal -> INT .)
    MINUS           reduce using rule 99 (literal -> INT .)
    TIMES           reduce using rule 99 (literal -> INT .)
    DIVIDE          reduce using rule 99 (literal -> INT .)
    MOD             reduce using rule 99 (literal -> INT .)
    LT              reduce using rule 99 (literal -> INT .)
    GT              reduce using rule 99 (literal -> INT .)
    LE              reduce using rule 99 (literal -> INT .)
    GE              reduce using rule 99 (literal -> INT .)
    EQ              reduce using rule 99 (literal -> INT .)
    NE              reduce using rule 99 (literal -> INT .)
    AND             reduce using rule 99 (literal -> INT .)
    OR              reduce using rule 99 (literal -> INT .)
    RPAREN          reduce using rule 99 (literal -> INT .)
    COMMA           reduce using rule 99 (literal -> INT .)


state 69

    (100) literal -> FLOAT .

    SEMICOLON       reduce using rule 100 (literal -> FLOAT .)
    PLUS            reduce using rule 100 (literal -> FLOAT .)
    MINUS           reduce using rule 100 (literal -> FLOAT .)
    TIMES           reduce using rule 100 (literal -> FLOAT .)
    DIVIDE          reduce using rule 100 (literal -> FLOAT .)
    MOD             reduce using rule 100 (literal -> FLOAT .)
    LT              reduce using rule 100 (literal -> FLOAT .)
    GT              reduce using rule 100 (literal -> FLOAT .)
    LE              reduce using rule 100 (literal -> FLOAT .)
    GE              reduce using rule 100 (literal -> FLOAT .)
    EQ              reduce using rule 100 (literal -> FLOAT .)
    NE              reduce using rule 100 (literal -> FLOAT .)
    AND             reduce using rule 100 (literal -> FLOAT .)
    OR              reduce using rule 100 (literal -> FLOAT .)
    RPAREN          reduce using rule 100 (literal -> FLOAT .)
    COMMA           reduce using rule 100 (literal -> FLOAT .)


state 70

    (101) literal -> DOUBLE .

    SEMICOLON       reduce using rule 101 (literal -> DOUBLE .)
    PLUS            reduce using rule 101 (literal -> DOUBLE .)
    MINUS           reduce using rule 101 (literal -> DOUBLE .)
    TIMES           reduce using rule 101 (literal -> DOUBLE .)
    DIVIDE          reduce using rule 101 (literal -> DOUBLE .)
    MOD             reduce using rule 101 (literal -> DOUBLE .)
    LT              reduce using rule 101 (literal -> DOUBLE .)
    GT              reduce using rule 101 (literal -> DOUBLE .)
    LE              reduce using rule 101 (literal -> DOUBLE .)
    GE              reduce using rule 101 (literal -> DOUBLE .)
    EQ              reduce using rule 101 (literal -> DOUBLE .)
    NE              reduce using rule 101 (literal -> DOUBLE .)
    AND             reduce using rule 101 (literal -> DOUBLE .)
    OR              reduce using rule 101 (literal -> DOUBLE .)
    RPAREN          reduce using rule 101 (literal -> DOUBLE .)
    COMMA           reduce using rule 101 (literal -> DOUBLE .)


state 71

    (102) literal -> STRING .

    SEMICOLON       reduce using rule 102 (literal -> STRING .)
    PLUS            reduce using rule 102 (literal -> STRING .)
    MINUS           reduce using rule 102 (literal -> STRING .)
    TIMES           reduce using rule 102 (literal -> STRING .)
    DIVIDE          reduce using rule 102 (literal -> STRING .)
    MOD             reduce using rule 102 (literal -> STRING .)
    LT              reduce using rule 102 (literal -> STRING .)
    GT              reduce using rule 102 (literal -> STRING .)
    LE              reduce using rule 102 (literal -> STRING .)
    GE              reduce using rule 102 (literal -> STRING .)
    EQ              reduce using rule 102 (literal -> STRING .)
    NE              reduce using rule 102 (literal -> STRING .)
    AND             reduce using rule 102 (literal -> STRING .)
    OR              reduce using rule 102 (literal -> STRING .)
    RPAREN          reduce using rule 102 (literal -> STRING .)
    COMMA           reduce using rule 102 (literal -> STRING .)


state 72

    (103) literal -> TRUE .

    SEMICOLON       reduce using rule 103 (literal -> TRUE .)
    PLUS            reduce using rule 103 (literal -> TRUE .)
    MINUS           reduce using rule 103 (literal -> TRUE .)
    TIMES           reduce using rule 103 (literal -> TRUE .)
    DIVIDE          reduce using rule 103 (literal -> TRUE .)
    MOD             reduce using rule 103 (literal -> TRUE .)
    LT              reduce using rule 103 (literal -> TRUE .)
    GT              reduce using rule 103 (literal -> TRUE .)
    LE              reduce using rule 103 (literal -> TRUE .)
    GE              reduce using rule 103 (literal -> TRUE .)
    EQ              reduce using rule 103 (literal -> TRUE .)
    NE              reduce using rule 103 (literal -> TRUE .)
    AND             reduce using rule 103 (literal -> TRUE .)
    OR              reduce using rule 103 (literal -> TRUE .)
    RPAREN          reduce using rule 103 (literal -> TRUE .)
    COMMA           reduce using rule 103 (literal -> TRUE .)


state 73

    (104) literal -> FALSE .

    SEMICOLON       reduce using rule 104 (literal -> FALSE .)
    PLUS            reduce using rule 104 (literal -> FALSE .)
    MINUS           reduce using rule 104 (literal -> FALSE .)
    TIMES           reduce using rule 104 (literal -> FALSE .)
    DIVIDE          reduce using rule 104 (literal -> FALSE .)
    MOD             reduce using rule 104 (literal -> FALSE .)
    LT              reduce using rule 104 (literal -> FALSE .)
    GT              reduce using rule 104 (literal -> FALSE .)
    LE              reduce using rule 104 (literal -> FALSE .)
    GE              reduce using rule 104 (literal -> FALSE .)
    EQ              reduce using rule 104 (literal -> FALSE .)
    NE              reduce using rule 104 (literal -> FALSE .)
    AND             reduce using rule 104 (literal -> FALSE .)
    OR              reduce using rule 104 (literal -> FALSE .)
    RPAREN          reduce using rule 104 (literal -> FALSE .)
    COMMA           reduce using rule 104 (literal -> FALSE .)


state 74

    (105) literal -> CHAR .

    SEMICOLON       reduce using rule 105 (literal -> CHAR .)
    PLUS            reduce using rule 105 (literal -> CHAR .)
    MINUS           reduce using rule 105 (literal -> CHAR .)
    TIMES           reduce using rule 105 (literal -> CHAR .)
    DIVIDE          reduce using rule 105 (literal -> CHAR .)
    MOD             reduce using rule 105 (literal -> CHAR .)
    LT              reduce using rule 105 (literal -> CHAR .)
    GT              reduce using rule 105 (literal -> CHAR .)
    LE              reduce using rule 105 (literal -> CHAR .)
    GE              reduce using rule 105 (literal -> CHAR .)
    EQ              reduce using rule 105 (literal -> CHAR .)
    NE              reduce using rule 105 (literal -> CHAR .)
    AND             reduce using rule 105 (literal -> CHAR .)
    OR              reduce using rule 105 (literal -> CHAR .)
    RPAREN          reduce using rule 105 (literal -> CHAR .)
    COMMA           reduce using rule 105 (literal -> CHAR .)


state 75

    (106) literal -> NULL .

    SEMICOLON       reduce using rule 106 (literal -> NULL .)
    PLUS            reduce using rule 106 (literal -> NULL .)
    MINUS           reduce using rule 106 (literal -> NULL .)
    TIMES           reduce using rule 106 (literal -> NULL .)
    DIVIDE          reduce using rule 106 (literal -> NULL .)
    MOD             reduce using rule 106 (literal -> NULL .)
    LT              reduce using rule 106 (literal -> NULL .)
    GT              reduce using rule 106 (literal -> NULL .)
    LE              reduce using rule 106 (literal -> NULL .)
    GE              reduce using rule 106 (literal -> NULL .)
    EQ              reduce using rule 106 (literal -> NULL .)
    NE              reduce using rule 106 (literal -> NULL .)
    AND             reduce using rule 106 (literal -> NULL .)
    OR              reduce using rule 106 (literal -> NULL .)
    RPAREN          reduce using rule 106 (literal -> NULL .)
    COMMA           reduce using rule 106 (literal -> NULL .)


state 76

    (33) function_declaration -> type ID LPAREN parameter_list . RPAREN block
    (35) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 118
    COMMA           shift and go to state 52


state 77

    (34) function_declaration -> VOID ID LPAREN parameter_list . RPAREN block
    (35) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 119
    COMMA           shift and go to state 52


state 78

    (39) block -> LBRACE statement_list . RBRACE
    (40) statement_list -> statement_list . statement
    (43) statement -> . var_declaration
    (44) statement -> . assignment
    (45) statement -> . function_call SEMICOLON
    (46) statement -> . if_statement
    (47) statement -> . while_statement
    (48) statement -> . for_statement
    (49) statement -> . return_statement
    (50) statement -> . break_statement
    (51) statement -> . continue_statement
    (52) statement -> . block
    (53) statement -> . SEMICOLON
    (23) var_declaration -> . type ID SEMICOLON
    (24) var_declaration -> . type ID EQUALS expression SEMICOLON
    (54) assignment -> . ID EQUALS expression SEMICOLON
    (55) assignment -> . ID PLUSEQ expression SEMICOLON
    (56) assignment -> . ID MINUSEQ expression SEMICOLON
    (57) assignment -> . ID TIMESEQ expression SEMICOLON
    (58) assignment -> . ID DIVEQ expression SEMICOLON
    (59) assignment -> . ID MODEQ expression SEMICOLON
    (60) function_call -> . ID LPAREN argument_list RPAREN
    (64) if_statement -> . IF LPAREN expression RPAREN statement else_clause
    (67) while_statement -> . WHILE LPAREN expression RPAREN statement
    (68) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement
    (76) return_statement -> . RETURN expression SEMICOLON
    (77) return_statement -> . RETURN SEMICOLON
    (78) break_statement -> . BREAK SEMICOLON
    (79) continue_statement -> . CONTINUE SEMICOLON
    (39) block -> . LBRACE statement_list RBRACE
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . DOUBLE
    (28) type -> . STRINGTYPE
    (29) type -> . BOOL
    (30) type -> . CHAR
    (31) type -> . VAR
    (32) type -> . ID

    RBRACE          shift and go to state 120
    SEMICOLON       shift and go to state 84
    ID              shift and go to state 93
    IF              shift and go to state 94
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    RETURN          shift and go to state 97
    BREAK           shift and go to state 98
    CONTINUE        shift and go to state 99
    LBRACE          shift and go to state 59
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    DOUBLE          shift and go to state 39
    STRINGTYPE      shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    VAR             shift and go to state 43

    statement                      shift and go to state 121
    var_declaration                shift and go to state 81
    assignment                     shift and go to state 82
    function_call                  shift and go to state 83
    if_statement                   shift and go to state 85
    while_statement                shift and go to state 86
    for_statement                  shift and go to state 87
    return_statement               shift and go to state 88
    break_statement                shift and go to state 89
    continue_statement             shift and go to state 90
    block                          shift and go to state 91
    type                           shift and go to state 92

state 79

    (41) statement_list -> statement .

    RBRACE          reduce using rule 41 (statement_list -> statement .)
    SEMICOLON       reduce using rule 41 (statement_list -> statement .)
    ID              reduce using rule 41 (statement_list -> statement .)
    IF              reduce using rule 41 (statement_list -> statement .)
    WHILE           reduce using rule 41 (statement_list -> statement .)
    FOR             reduce using rule 41 (statement_list -> statement .)
    RETURN          reduce using rule 41 (statement_list -> statement .)
    BREAK           reduce using rule 41 (statement_list -> statement .)
    CONTINUE        reduce using rule 41 (statement_list -> statement .)
    LBRACE          reduce using rule 41 (statement_list -> statement .)
    INT             reduce using rule 41 (statement_list -> statement .)
    FLOAT           reduce using rule 41 (statement_list -> statement .)
    DOUBLE          reduce using rule 41 (statement_list -> statement .)
    STRINGTYPE      reduce using rule 41 (statement_list -> statement .)
    BOOL            reduce using rule 41 (statement_list -> statement .)
    CHAR            reduce using rule 41 (statement_list -> statement .)
    VAR             reduce using rule 41 (statement_list -> statement .)


state 80

    (42) statement_list -> empty .

    RBRACE          reduce using rule 42 (statement_list -> empty .)
    SEMICOLON       reduce using rule 42 (statement_list -> empty .)
    ID              reduce using rule 42 (statement_list -> empty .)
    IF              reduce using rule 42 (statement_list -> empty .)
    WHILE           reduce using rule 42 (statement_list -> empty .)
    FOR             reduce using rule 42 (statement_list -> empty .)
    RETURN          reduce using rule 42 (statement_list -> empty .)
    BREAK           reduce using rule 42 (statement_list -> empty .)
    CONTINUE        reduce using rule 42 (statement_list -> empty .)
    LBRACE          reduce using rule 42 (statement_list -> empty .)
    INT             reduce using rule 42 (statement_list -> empty .)
    FLOAT           reduce using rule 42 (statement_list -> empty .)
    DOUBLE          reduce using rule 42 (statement_list -> empty .)
    STRINGTYPE      reduce using rule 42 (statement_list -> empty .)
    BOOL            reduce using rule 42 (statement_list -> empty .)
    CHAR            reduce using rule 42 (statement_list -> empty .)
    VAR             reduce using rule 42 (statement_list -> empty .)


state 81

    (43) statement -> var_declaration .

    RBRACE          reduce using rule 43 (statement -> var_declaration .)
    SEMICOLON       reduce using rule 43 (statement -> var_declaration .)
    ID              reduce using rule 43 (statement -> var_declaration .)
    IF              reduce using rule 43 (statement -> var_declaration .)
    WHILE           reduce using rule 43 (statement -> var_declaration .)
    FOR             reduce using rule 43 (statement -> var_declaration .)
    RETURN          reduce using rule 43 (statement -> var_declaration .)
    BREAK           reduce using rule 43 (statement -> var_declaration .)
    CONTINUE        reduce using rule 43 (statement -> var_declaration .)
    LBRACE          reduce using rule 43 (statement -> var_declaration .)
    INT             reduce using rule 43 (statement -> var_declaration .)
    FLOAT           reduce using rule 43 (statement -> var_declaration .)
    DOUBLE          reduce using rule 43 (statement -> var_declaration .)
    STRINGTYPE      reduce using rule 43 (statement -> var_declaration .)
    BOOL            reduce using rule 43 (statement -> var_declaration .)
    CHAR            reduce using rule 43 (statement -> var_declaration .)
    VAR             reduce using rule 43 (statement -> var_declaration .)
    ELSE            reduce using rule 43 (statement -> var_declaration .)


state 82

    (44) statement -> assignment .

    RBRACE          reduce using rule 44 (statement -> assignment .)
    SEMICOLON       reduce using rule 44 (statement -> assignment .)
    ID              reduce using rule 44 (statement -> assignment .)
    IF              reduce using rule 44 (statement -> assignment .)
    WHILE           reduce using rule 44 (statement -> assignment .)
    FOR             reduce using rule 44 (statement -> assignment .)
    RETURN          reduce using rule 44 (statement -> assignment .)
    BREAK           reduce using rule 44 (statement -> assignment .)
    CONTINUE        reduce using rule 44 (statement -> assignment .)
    LBRACE          reduce using rule 44 (statement -> assignment .)
    INT             reduce using rule 44 (statement -> assignment .)
    FLOAT           reduce using rule 44 (statement -> assignment .)
    DOUBLE          reduce using rule 44 (statement -> assignment .)
    STRINGTYPE      reduce using rule 44 (statement -> assignment .)
    BOOL            reduce using rule 44 (statement -> assignment .)
    CHAR            reduce using rule 44 (statement -> assignment .)
    VAR             reduce using rule 44 (statement -> assignment .)
    ELSE            reduce using rule 44 (statement -> assignment .)


state 83

    (45) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 122


state 84

    (53) statement -> SEMICOLON .

    RBRACE          reduce using rule 53 (statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 53 (statement -> SEMICOLON .)
    ID              reduce using rule 53 (statement -> SEMICOLON .)
    IF              reduce using rule 53 (statement -> SEMICOLON .)
    WHILE           reduce using rule 53 (statement -> SEMICOLON .)
    FOR             reduce using rule 53 (statement -> SEMICOLON .)
    RETURN          reduce using rule 53 (statement -> SEMICOLON .)
    BREAK           reduce using rule 53 (statement -> SEMICOLON .)
    CONTINUE        reduce using rule 53 (statement -> SEMICOLON .)
    LBRACE          reduce using rule 53 (statement -> SEMICOLON .)
    INT             reduce using rule 53 (statement -> SEMICOLON .)
    FLOAT           reduce using rule 53 (statement -> SEMICOLON .)
    DOUBLE          reduce using rule 53 (statement -> SEMICOLON .)
    STRINGTYPE      reduce using rule 53 (statement -> SEMICOLON .)
    BOOL            reduce using rule 53 (statement -> SEMICOLON .)
    CHAR            reduce using rule 53 (statement -> SEMICOLON .)
    VAR             reduce using rule 53 (statement -> SEMICOLON .)
    ELSE            reduce using rule 53 (statement -> SEMICOLON .)


state 85

    (46) statement -> if_statement .

    RBRACE          reduce using rule 46 (statement -> if_statement .)
    SEMICOLON       reduce using rule 46 (statement -> if_statement .)
    ID              reduce using rule 46 (statement -> if_statement .)
    IF              reduce using rule 46 (statement -> if_statement .)
    WHILE           reduce using rule 46 (statement -> if_statement .)
    FOR             reduce using rule 46 (statement -> if_statement .)
    RETURN          reduce using rule 46 (statement -> if_statement .)
    BREAK           reduce using rule 46 (statement -> if_statement .)
    CONTINUE        reduce using rule 46 (statement -> if_statement .)
    LBRACE          reduce using rule 46 (statement -> if_statement .)
    INT             reduce using rule 46 (statement -> if_statement .)
    FLOAT           reduce using rule 46 (statement -> if_statement .)
    DOUBLE          reduce using rule 46 (statement -> if_statement .)
    STRINGTYPE      reduce using rule 46 (statement -> if_statement .)
    BOOL            reduce using rule 46 (statement -> if_statement .)
    CHAR            reduce using rule 46 (statement -> if_statement .)
    VAR             reduce using rule 46 (statement -> if_statement .)
    ELSE            reduce using rule 46 (statement -> if_statement .)


state 86

    (47) statement -> while_statement .

    RBRACE          reduce using rule 47 (statement -> while_statement .)
    SEMICOLON       reduce using rule 47 (statement -> while_statement .)
    ID              reduce using rule 47 (statement -> while_statement .)
    IF              reduce using rule 47 (statement -> while_statement .)
    WHILE           reduce using rule 47 (statement -> while_statement .)
    FOR             reduce using rule 47 (statement -> while_statement .)
    RETURN          reduce using rule 47 (statement -> while_statement .)
    BREAK           reduce using rule 47 (statement -> while_statement .)
    CONTINUE        reduce using rule 47 (statement -> while_statement .)
    LBRACE          reduce using rule 47 (statement -> while_statement .)
    INT             reduce using rule 47 (statement -> while_statement .)
    FLOAT           reduce using rule 47 (statement -> while_statement .)
    DOUBLE          reduce using rule 47 (statement -> while_statement .)
    STRINGTYPE      reduce using rule 47 (statement -> while_statement .)
    BOOL            reduce using rule 47 (statement -> while_statement .)
    CHAR            reduce using rule 47 (statement -> while_statement .)
    VAR             reduce using rule 47 (statement -> while_statement .)
    ELSE            reduce using rule 47 (statement -> while_statement .)


state 87

    (48) statement -> for_statement .

    RBRACE          reduce using rule 48 (statement -> for_statement .)
    SEMICOLON       reduce using rule 48 (statement -> for_statement .)
    ID              reduce using rule 48 (statement -> for_statement .)
    IF              reduce using rule 48 (statement -> for_statement .)
    WHILE           reduce using rule 48 (statement -> for_statement .)
    FOR             reduce using rule 48 (statement -> for_statement .)
    RETURN          reduce using rule 48 (statement -> for_statement .)
    BREAK           reduce using rule 48 (statement -> for_statement .)
    CONTINUE        reduce using rule 48 (statement -> for_statement .)
    LBRACE          reduce using rule 48 (statement -> for_statement .)
    INT             reduce using rule 48 (statement -> for_statement .)
    FLOAT           reduce using rule 48 (statement -> for_statement .)
    DOUBLE          reduce using rule 48 (statement -> for_statement .)
    STRINGTYPE      reduce using rule 48 (statement -> for_statement .)
    BOOL            reduce using rule 48 (statement -> for_statement .)
    CHAR            reduce using rule 48 (statement -> for_statement .)
    VAR             reduce using rule 48 (statement -> for_statement .)
    ELSE            reduce using rule 48 (statement -> for_statement .)


state 88

    (49) statement -> return_statement .

    RBRACE          reduce using rule 49 (statement -> return_statement .)
    SEMICOLON       reduce using rule 49 (statement -> return_statement .)
    ID              reduce using rule 49 (statement -> return_statement .)
    IF              reduce using rule 49 (statement -> return_statement .)
    WHILE           reduce using rule 49 (statement -> return_statement .)
    FOR             reduce using rule 49 (statement -> return_statement .)
    RETURN          reduce using rule 49 (statement -> return_statement .)
    BREAK           reduce using rule 49 (statement -> return_statement .)
    CONTINUE        reduce using rule 49 (statement -> return_statement .)
    LBRACE          reduce using rule 49 (statement -> return_statement .)
    INT             reduce using rule 49 (statement -> return_statement .)
    FLOAT           reduce using rule 49 (statement -> return_statement .)
    DOUBLE          reduce using rule 49 (statement -> return_statement .)
    STRINGTYPE      reduce using rule 49 (statement -> return_statement .)
    BOOL            reduce using rule 49 (statement -> return_statement .)
    CHAR            reduce using rule 49 (statement -> return_statement .)
    VAR             reduce using rule 49 (statement -> return_statement .)
    ELSE            reduce using rule 49 (statement -> return_statement .)


state 89

    (50) statement -> break_statement .

    RBRACE          reduce using rule 50 (statement -> break_statement .)
    SEMICOLON       reduce using rule 50 (statement -> break_statement .)
    ID              reduce using rule 50 (statement -> break_statement .)
    IF              reduce using rule 50 (statement -> break_statement .)
    WHILE           reduce using rule 50 (statement -> break_statement .)
    FOR             reduce using rule 50 (statement -> break_statement .)
    RETURN          reduce using rule 50 (statement -> break_statement .)
    BREAK           reduce using rule 50 (statement -> break_statement .)
    CONTINUE        reduce using rule 50 (statement -> break_statement .)
    LBRACE          reduce using rule 50 (statement -> break_statement .)
    INT             reduce using rule 50 (statement -> break_statement .)
    FLOAT           reduce using rule 50 (statement -> break_statement .)
    DOUBLE          reduce using rule 50 (statement -> break_statement .)
    STRINGTYPE      reduce using rule 50 (statement -> break_statement .)
    BOOL            reduce using rule 50 (statement -> break_statement .)
    CHAR            reduce using rule 50 (statement -> break_statement .)
    VAR             reduce using rule 50 (statement -> break_statement .)
    ELSE            reduce using rule 50 (statement -> break_statement .)


state 90

    (51) statement -> continue_statement .

    RBRACE          reduce using rule 51 (statement -> continue_statement .)
    SEMICOLON       reduce using rule 51 (statement -> continue_statement .)
    ID              reduce using rule 51 (statement -> continue_statement .)
    IF              reduce using rule 51 (statement -> continue_statement .)
    WHILE           reduce using rule 51 (statement -> continue_statement .)
    FOR             reduce using rule 51 (statement -> continue_statement .)
    RETURN          reduce using rule 51 (statement -> continue_statement .)
    BREAK           reduce using rule 51 (statement -> continue_statement .)
    CONTINUE        reduce using rule 51 (statement -> continue_statement .)
    LBRACE          reduce using rule 51 (statement -> continue_statement .)
    INT             reduce using rule 51 (statement -> continue_statement .)
    FLOAT           reduce using rule 51 (statement -> continue_statement .)
    DOUBLE          reduce using rule 51 (statement -> continue_statement .)
    STRINGTYPE      reduce using rule 51 (statement -> continue_statement .)
    BOOL            reduce using rule 51 (statement -> continue_statement .)
    CHAR            reduce using rule 51 (statement -> continue_statement .)
    VAR             reduce using rule 51 (statement -> continue_statement .)
    ELSE            reduce using rule 51 (statement -> continue_statement .)


state 91

    (52) statement -> block .

    RBRACE          reduce using rule 52 (statement -> block .)
    SEMICOLON       reduce using rule 52 (statement -> block .)
    ID              reduce using rule 52 (statement -> block .)
    IF              reduce using rule 52 (statement -> block .)
    WHILE           reduce using rule 52 (statement -> block .)
    FOR             reduce using rule 52 (statement -> block .)
    RETURN          reduce using rule 52 (statement -> block .)
    BREAK           reduce using rule 52 (statement -> block .)
    CONTINUE        reduce using rule 52 (statement -> block .)
    LBRACE          reduce using rule 52 (statement -> block .)
    INT             reduce using rule 52 (statement -> block .)
    FLOAT           reduce using rule 52 (statement -> block .)
    DOUBLE          reduce using rule 52 (statement -> block .)
    STRINGTYPE      reduce using rule 52 (statement -> block .)
    BOOL            reduce using rule 52 (statement -> block .)
    CHAR            reduce using rule 52 (statement -> block .)
    VAR             reduce using rule 52 (statement -> block .)
    ELSE            reduce using rule 52 (statement -> block .)


state 92

    (23) var_declaration -> type . ID SEMICOLON
    (24) var_declaration -> type . ID EQUALS expression SEMICOLON

    ID              shift and go to state 123


state 93

    (54) assignment -> ID . EQUALS expression SEMICOLON
    (55) assignment -> ID . PLUSEQ expression SEMICOLON
    (56) assignment -> ID . MINUSEQ expression SEMICOLON
    (57) assignment -> ID . TIMESEQ expression SEMICOLON
    (58) assignment -> ID . DIVEQ expression SEMICOLON
    (59) assignment -> ID . MODEQ expression SEMICOLON
    (60) function_call -> ID . LPAREN argument_list RPAREN
    (32) type -> ID .

    EQUALS          shift and go to state 124
    PLUSEQ          shift and go to state 125
    MINUSEQ         shift and go to state 126
    TIMESEQ         shift and go to state 127
    DIVEQ           shift and go to state 128
    MODEQ           shift and go to state 129
    LPAREN          shift and go to state 100
    ID              reduce using rule 32 (type -> ID .)


state 94

    (64) if_statement -> IF . LPAREN expression RPAREN statement else_clause

    LPAREN          shift and go to state 130


state 95

    (67) while_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 131


state 96

    (68) for_statement -> FOR . LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement

    LPAREN          shift and go to state 132


state 97

    (76) return_statement -> RETURN . expression SEMICOLON
    (77) return_statement -> RETURN . SEMICOLON
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    SEMICOLON       shift and go to state 134
    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 133
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 98

    (78) break_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 135


state 99

    (79) continue_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 136


state 100

    (60) function_call -> ID LPAREN . argument_list RPAREN
    (61) argument_list -> . argument_list COMMA expression
    (62) argument_list -> . expression
    (63) argument_list -> . empty
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (107) empty -> .
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    RPAREN          reduce using rule 107 (empty -> .)
    COMMA           reduce using rule 107 (empty -> .)
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    argument_list                  shift and go to state 137
    expression                     shift and go to state 138
    empty                          shift and go to state 139
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 101

    (24) var_declaration -> type ID EQUALS expression SEMICOLON .

    RBRACE          reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    SEMICOLON       reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    ID              reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    PUBLIC          reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    PRIVATE         reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    VOID            reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    INT             reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    DOUBLE          reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    STRINGTYPE      reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    BOOL            reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    CHAR            reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    VAR             reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    IF              reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    FOR             reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    BREAK           reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    CONTINUE        reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    LBRACE          reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)
    ELSE            reduce using rule 24 (var_declaration -> type ID EQUALS expression SEMICOLON .)


state 102

    (83) expression -> expression PLUS . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 140
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 103

    (84) expression -> expression MINUS . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 141
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 104

    (85) expression -> expression TIMES . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 142
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 105

    (86) expression -> expression DIVIDE . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 143
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 106

    (87) expression -> expression MOD . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 144
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 107

    (88) expression -> expression LT . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 145
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 108

    (89) expression -> expression GT . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 146
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 109

    (90) expression -> expression LE . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 147
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 110

    (91) expression -> expression GE . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 148
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 111

    (92) expression -> expression EQ . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 149
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 112

    (93) expression -> expression NE . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 150
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 113

    (94) expression -> expression AND . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 151
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 114

    (95) expression -> expression OR . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 152
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 115

    (96) expression -> MINUS expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 96 (expression -> MINUS expression .)
    PLUS            reduce using rule 96 (expression -> MINUS expression .)
    MINUS           reduce using rule 96 (expression -> MINUS expression .)
    TIMES           reduce using rule 96 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 96 (expression -> MINUS expression .)
    MOD             reduce using rule 96 (expression -> MINUS expression .)
    LT              reduce using rule 96 (expression -> MINUS expression .)
    GT              reduce using rule 96 (expression -> MINUS expression .)
    LE              reduce using rule 96 (expression -> MINUS expression .)
    GE              reduce using rule 96 (expression -> MINUS expression .)
    EQ              reduce using rule 96 (expression -> MINUS expression .)
    NE              reduce using rule 96 (expression -> MINUS expression .)
    AND             reduce using rule 96 (expression -> MINUS expression .)
    OR              reduce using rule 96 (expression -> MINUS expression .)
    RPAREN          reduce using rule 96 (expression -> MINUS expression .)
    COMMA           reduce using rule 96 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! TIMES           [ shift and go to state 104 ]
  ! DIVIDE          [ shift and go to state 105 ]
  ! MOD             [ shift and go to state 106 ]
  ! LT              [ shift and go to state 107 ]
  ! GT              [ shift and go to state 108 ]
  ! LE              [ shift and go to state 109 ]
  ! GE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! NE              [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 116

    (97) expression -> NOT expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 97 (expression -> NOT expression .)
    PLUS            reduce using rule 97 (expression -> NOT expression .)
    MINUS           reduce using rule 97 (expression -> NOT expression .)
    TIMES           reduce using rule 97 (expression -> NOT expression .)
    DIVIDE          reduce using rule 97 (expression -> NOT expression .)
    MOD             reduce using rule 97 (expression -> NOT expression .)
    LT              reduce using rule 97 (expression -> NOT expression .)
    GT              reduce using rule 97 (expression -> NOT expression .)
    LE              reduce using rule 97 (expression -> NOT expression .)
    GE              reduce using rule 97 (expression -> NOT expression .)
    EQ              reduce using rule 97 (expression -> NOT expression .)
    NE              reduce using rule 97 (expression -> NOT expression .)
    AND             reduce using rule 97 (expression -> NOT expression .)
    OR              reduce using rule 97 (expression -> NOT expression .)
    RPAREN          reduce using rule 97 (expression -> NOT expression .)
    COMMA           reduce using rule 97 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! TIMES           [ shift and go to state 104 ]
  ! DIVIDE          [ shift and go to state 105 ]
  ! MOD             [ shift and go to state 106 ]
  ! LT              [ shift and go to state 107 ]
  ! GT              [ shift and go to state 108 ]
  ! LE              [ shift and go to state 109 ]
  ! GE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! NE              [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 117

    (98) expression -> LPAREN expression . RPAREN
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    RPAREN          shift and go to state 153
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 118

    (33) function_declaration -> type ID LPAREN parameter_list RPAREN . block
    (39) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 59

    block                          shift and go to state 154

state 119

    (34) function_declaration -> VOID ID LPAREN parameter_list RPAREN . block
    (39) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 59

    block                          shift and go to state 155

state 120

    (39) block -> LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    SEMICOLON       reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    PUBLIC          reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    PRIVATE         reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    VOID            reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    STRINGTYPE      reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    BOOL            reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    VAR             reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 39 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 39 (block -> LBRACE statement_list RBRACE .)


state 121

    (40) statement_list -> statement_list statement .

    RBRACE          reduce using rule 40 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 40 (statement_list -> statement_list statement .)
    ID              reduce using rule 40 (statement_list -> statement_list statement .)
    IF              reduce using rule 40 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 40 (statement_list -> statement_list statement .)
    FOR             reduce using rule 40 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 40 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 40 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 40 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 40 (statement_list -> statement_list statement .)
    INT             reduce using rule 40 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 40 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 40 (statement_list -> statement_list statement .)
    STRINGTYPE      reduce using rule 40 (statement_list -> statement_list statement .)
    BOOL            reduce using rule 40 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 40 (statement_list -> statement_list statement .)
    VAR             reduce using rule 40 (statement_list -> statement_list statement .)


state 122

    (45) statement -> function_call SEMICOLON .

    RBRACE          reduce using rule 45 (statement -> function_call SEMICOLON .)
    SEMICOLON       reduce using rule 45 (statement -> function_call SEMICOLON .)
    ID              reduce using rule 45 (statement -> function_call SEMICOLON .)
    IF              reduce using rule 45 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 45 (statement -> function_call SEMICOLON .)
    FOR             reduce using rule 45 (statement -> function_call SEMICOLON .)
    RETURN          reduce using rule 45 (statement -> function_call SEMICOLON .)
    BREAK           reduce using rule 45 (statement -> function_call SEMICOLON .)
    CONTINUE        reduce using rule 45 (statement -> function_call SEMICOLON .)
    LBRACE          reduce using rule 45 (statement -> function_call SEMICOLON .)
    INT             reduce using rule 45 (statement -> function_call SEMICOLON .)
    FLOAT           reduce using rule 45 (statement -> function_call SEMICOLON .)
    DOUBLE          reduce using rule 45 (statement -> function_call SEMICOLON .)
    STRINGTYPE      reduce using rule 45 (statement -> function_call SEMICOLON .)
    BOOL            reduce using rule 45 (statement -> function_call SEMICOLON .)
    CHAR            reduce using rule 45 (statement -> function_call SEMICOLON .)
    VAR             reduce using rule 45 (statement -> function_call SEMICOLON .)
    ELSE            reduce using rule 45 (statement -> function_call SEMICOLON .)


state 123

    (23) var_declaration -> type ID . SEMICOLON
    (24) var_declaration -> type ID . EQUALS expression SEMICOLON

    SEMICOLON       shift and go to state 54
    EQUALS          shift and go to state 55


state 124

    (54) assignment -> ID EQUALS . expression SEMICOLON
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 156
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 125

    (55) assignment -> ID PLUSEQ . expression SEMICOLON
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 157
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 126

    (56) assignment -> ID MINUSEQ . expression SEMICOLON
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 158
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 127

    (57) assignment -> ID TIMESEQ . expression SEMICOLON
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 159
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 128

    (58) assignment -> ID DIVEQ . expression SEMICOLON
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 160
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 129

    (59) assignment -> ID MODEQ . expression SEMICOLON
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 161
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 130

    (64) if_statement -> IF LPAREN . expression RPAREN statement else_clause
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 162
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 131

    (67) while_statement -> WHILE LPAREN . expression RPAREN statement
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 163
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 132

    (68) for_statement -> FOR LPAREN . for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement
    (69) for_init -> . var_declaration
    (70) for_init -> . assignment
    (71) for_init -> . empty
    (23) var_declaration -> . type ID SEMICOLON
    (24) var_declaration -> . type ID EQUALS expression SEMICOLON
    (54) assignment -> . ID EQUALS expression SEMICOLON
    (55) assignment -> . ID PLUSEQ expression SEMICOLON
    (56) assignment -> . ID MINUSEQ expression SEMICOLON
    (57) assignment -> . ID TIMESEQ expression SEMICOLON
    (58) assignment -> . ID DIVEQ expression SEMICOLON
    (59) assignment -> . ID MODEQ expression SEMICOLON
    (107) empty -> .
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . DOUBLE
    (28) type -> . STRINGTYPE
    (29) type -> . BOOL
    (30) type -> . CHAR
    (31) type -> . VAR
    (32) type -> . ID

    ID              shift and go to state 168
    SEMICOLON       reduce using rule 107 (empty -> .)
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    DOUBLE          shift and go to state 39
    STRINGTYPE      shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    VAR             shift and go to state 43

    for_init                       shift and go to state 164
    var_declaration                shift and go to state 165
    assignment                     shift and go to state 166
    empty                          shift and go to state 167
    type                           shift and go to state 92

state 133

    (76) return_statement -> RETURN expression . SEMICOLON
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       shift and go to state 169
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 134

    (77) return_statement -> RETURN SEMICOLON .

    RBRACE          reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    INT             reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    STRINGTYPE      reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    BOOL            reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    VAR             reduce using rule 77 (return_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 77 (return_statement -> RETURN SEMICOLON .)


state 135

    (78) break_statement -> BREAK SEMICOLON .

    RBRACE          reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    STRINGTYPE      reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    BOOL            reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    VAR             reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 78 (break_statement -> BREAK SEMICOLON .)


state 136

    (79) continue_statement -> CONTINUE SEMICOLON .

    RBRACE          reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    STRINGTYPE      reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    BOOL            reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    VAR             reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)


state 137

    (60) function_call -> ID LPAREN argument_list . RPAREN
    (61) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 170
    COMMA           shift and go to state 171


state 138

    (62) argument_list -> expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    RPAREN          reduce using rule 62 (argument_list -> expression .)
    COMMA           reduce using rule 62 (argument_list -> expression .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 139

    (63) argument_list -> empty .

    RPAREN          reduce using rule 63 (argument_list -> empty .)
    COMMA           reduce using rule 63 (argument_list -> empty .)


state 140

    (83) expression -> expression PLUS expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 83 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 83 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 83 (expression -> expression PLUS expression .)
    LT              reduce using rule 83 (expression -> expression PLUS expression .)
    GT              reduce using rule 83 (expression -> expression PLUS expression .)
    LE              reduce using rule 83 (expression -> expression PLUS expression .)
    GE              reduce using rule 83 (expression -> expression PLUS expression .)
    EQ              reduce using rule 83 (expression -> expression PLUS expression .)
    NE              reduce using rule 83 (expression -> expression PLUS expression .)
    AND             reduce using rule 83 (expression -> expression PLUS expression .)
    OR              reduce using rule 83 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 83 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 83 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

  ! TIMES           [ reduce using rule 83 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 83 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 83 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! LT              [ shift and go to state 107 ]
  ! GT              [ shift and go to state 108 ]
  ! LE              [ shift and go to state 109 ]
  ! GE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! NE              [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 141

    (84) expression -> expression MINUS expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 84 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 84 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 84 (expression -> expression MINUS expression .)
    LT              reduce using rule 84 (expression -> expression MINUS expression .)
    GT              reduce using rule 84 (expression -> expression MINUS expression .)
    LE              reduce using rule 84 (expression -> expression MINUS expression .)
    GE              reduce using rule 84 (expression -> expression MINUS expression .)
    EQ              reduce using rule 84 (expression -> expression MINUS expression .)
    NE              reduce using rule 84 (expression -> expression MINUS expression .)
    AND             reduce using rule 84 (expression -> expression MINUS expression .)
    OR              reduce using rule 84 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 84 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 84 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

  ! TIMES           [ reduce using rule 84 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 84 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 84 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! LT              [ shift and go to state 107 ]
  ! GT              [ shift and go to state 108 ]
  ! LE              [ shift and go to state 109 ]
  ! GE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! NE              [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 142

    (85) expression -> expression TIMES expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 85 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 85 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 85 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 85 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 85 (expression -> expression TIMES expression .)
    MOD             reduce using rule 85 (expression -> expression TIMES expression .)
    LT              reduce using rule 85 (expression -> expression TIMES expression .)
    GT              reduce using rule 85 (expression -> expression TIMES expression .)
    LE              reduce using rule 85 (expression -> expression TIMES expression .)
    GE              reduce using rule 85 (expression -> expression TIMES expression .)
    EQ              reduce using rule 85 (expression -> expression TIMES expression .)
    NE              reduce using rule 85 (expression -> expression TIMES expression .)
    AND             reduce using rule 85 (expression -> expression TIMES expression .)
    OR              reduce using rule 85 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 85 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 85 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! TIMES           [ shift and go to state 104 ]
  ! DIVIDE          [ shift and go to state 105 ]
  ! MOD             [ shift and go to state 106 ]
  ! LT              [ shift and go to state 107 ]
  ! GT              [ shift and go to state 108 ]
  ! LE              [ shift and go to state 109 ]
  ! GE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! NE              [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 143

    (86) expression -> expression DIVIDE expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 86 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 86 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 86 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 86 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 86 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 86 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 86 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 86 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 86 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 86 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 86 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 86 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 86 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 86 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 86 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 86 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! TIMES           [ shift and go to state 104 ]
  ! DIVIDE          [ shift and go to state 105 ]
  ! MOD             [ shift and go to state 106 ]
  ! LT              [ shift and go to state 107 ]
  ! GT              [ shift and go to state 108 ]
  ! LE              [ shift and go to state 109 ]
  ! GE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! NE              [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 144

    (87) expression -> expression MOD expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 87 (expression -> expression MOD expression .)
    PLUS            reduce using rule 87 (expression -> expression MOD expression .)
    MINUS           reduce using rule 87 (expression -> expression MOD expression .)
    TIMES           reduce using rule 87 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 87 (expression -> expression MOD expression .)
    MOD             reduce using rule 87 (expression -> expression MOD expression .)
    LT              reduce using rule 87 (expression -> expression MOD expression .)
    GT              reduce using rule 87 (expression -> expression MOD expression .)
    LE              reduce using rule 87 (expression -> expression MOD expression .)
    GE              reduce using rule 87 (expression -> expression MOD expression .)
    EQ              reduce using rule 87 (expression -> expression MOD expression .)
    NE              reduce using rule 87 (expression -> expression MOD expression .)
    AND             reduce using rule 87 (expression -> expression MOD expression .)
    OR              reduce using rule 87 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 87 (expression -> expression MOD expression .)
    COMMA           reduce using rule 87 (expression -> expression MOD expression .)

  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! TIMES           [ shift and go to state 104 ]
  ! DIVIDE          [ shift and go to state 105 ]
  ! MOD             [ shift and go to state 106 ]
  ! LT              [ shift and go to state 107 ]
  ! GT              [ shift and go to state 108 ]
  ! LE              [ shift and go to state 109 ]
  ! GE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! NE              [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 145

    (88) expression -> expression LT expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 88 (expression -> expression LT expression .)
    LT              reduce using rule 88 (expression -> expression LT expression .)
    GT              reduce using rule 88 (expression -> expression LT expression .)
    LE              reduce using rule 88 (expression -> expression LT expression .)
    GE              reduce using rule 88 (expression -> expression LT expression .)
    EQ              reduce using rule 88 (expression -> expression LT expression .)
    NE              reduce using rule 88 (expression -> expression LT expression .)
    AND             reduce using rule 88 (expression -> expression LT expression .)
    OR              reduce using rule 88 (expression -> expression LT expression .)
    RPAREN          reduce using rule 88 (expression -> expression LT expression .)
    COMMA           reduce using rule 88 (expression -> expression LT expression .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

  ! PLUS            [ reduce using rule 88 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 88 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 88 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 88 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 88 (expression -> expression LT expression .) ]
  ! LT              [ shift and go to state 107 ]
  ! GT              [ shift and go to state 108 ]
  ! LE              [ shift and go to state 109 ]
  ! GE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! NE              [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 146

    (89) expression -> expression GT expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 89 (expression -> expression GT expression .)
    LT              reduce using rule 89 (expression -> expression GT expression .)
    GT              reduce using rule 89 (expression -> expression GT expression .)
    LE              reduce using rule 89 (expression -> expression GT expression .)
    GE              reduce using rule 89 (expression -> expression GT expression .)
    EQ              reduce using rule 89 (expression -> expression GT expression .)
    NE              reduce using rule 89 (expression -> expression GT expression .)
    AND             reduce using rule 89 (expression -> expression GT expression .)
    OR              reduce using rule 89 (expression -> expression GT expression .)
    RPAREN          reduce using rule 89 (expression -> expression GT expression .)
    COMMA           reduce using rule 89 (expression -> expression GT expression .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

  ! PLUS            [ reduce using rule 89 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 89 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 89 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 89 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 89 (expression -> expression GT expression .) ]
  ! LT              [ shift and go to state 107 ]
  ! GT              [ shift and go to state 108 ]
  ! LE              [ shift and go to state 109 ]
  ! GE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! NE              [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 147

    (90) expression -> expression LE expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 90 (expression -> expression LE expression .)
    LT              reduce using rule 90 (expression -> expression LE expression .)
    GT              reduce using rule 90 (expression -> expression LE expression .)
    LE              reduce using rule 90 (expression -> expression LE expression .)
    GE              reduce using rule 90 (expression -> expression LE expression .)
    EQ              reduce using rule 90 (expression -> expression LE expression .)
    NE              reduce using rule 90 (expression -> expression LE expression .)
    AND             reduce using rule 90 (expression -> expression LE expression .)
    OR              reduce using rule 90 (expression -> expression LE expression .)
    RPAREN          reduce using rule 90 (expression -> expression LE expression .)
    COMMA           reduce using rule 90 (expression -> expression LE expression .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

  ! PLUS            [ reduce using rule 90 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 90 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 90 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 90 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 90 (expression -> expression LE expression .) ]
  ! LT              [ shift and go to state 107 ]
  ! GT              [ shift and go to state 108 ]
  ! LE              [ shift and go to state 109 ]
  ! GE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! NE              [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 148

    (91) expression -> expression GE expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 91 (expression -> expression GE expression .)
    LT              reduce using rule 91 (expression -> expression GE expression .)
    GT              reduce using rule 91 (expression -> expression GE expression .)
    LE              reduce using rule 91 (expression -> expression GE expression .)
    GE              reduce using rule 91 (expression -> expression GE expression .)
    EQ              reduce using rule 91 (expression -> expression GE expression .)
    NE              reduce using rule 91 (expression -> expression GE expression .)
    AND             reduce using rule 91 (expression -> expression GE expression .)
    OR              reduce using rule 91 (expression -> expression GE expression .)
    RPAREN          reduce using rule 91 (expression -> expression GE expression .)
    COMMA           reduce using rule 91 (expression -> expression GE expression .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106

  ! PLUS            [ reduce using rule 91 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 91 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 91 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 91 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 91 (expression -> expression GE expression .) ]
  ! LT              [ shift and go to state 107 ]
  ! GT              [ shift and go to state 108 ]
  ! LE              [ shift and go to state 109 ]
  ! GE              [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! NE              [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 149

    (92) expression -> expression EQ expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 92 (expression -> expression EQ expression .)
    EQ              reduce using rule 92 (expression -> expression EQ expression .)
    NE              reduce using rule 92 (expression -> expression EQ expression .)
    AND             reduce using rule 92 (expression -> expression EQ expression .)
    OR              reduce using rule 92 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 92 (expression -> expression EQ expression .)
    COMMA           reduce using rule 92 (expression -> expression EQ expression .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110

  ! PLUS            [ reduce using rule 92 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 92 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 92 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 92 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 92 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 92 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 92 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 92 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 92 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 111 ]
  ! NE              [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 150

    (93) expression -> expression NE expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 93 (expression -> expression NE expression .)
    EQ              reduce using rule 93 (expression -> expression NE expression .)
    NE              reduce using rule 93 (expression -> expression NE expression .)
    AND             reduce using rule 93 (expression -> expression NE expression .)
    OR              reduce using rule 93 (expression -> expression NE expression .)
    RPAREN          reduce using rule 93 (expression -> expression NE expression .)
    COMMA           reduce using rule 93 (expression -> expression NE expression .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110

  ! PLUS            [ reduce using rule 93 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 93 (expression -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 93 (expression -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 93 (expression -> expression NE expression .) ]
  ! MOD             [ reduce using rule 93 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 93 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 93 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 93 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 93 (expression -> expression NE expression .) ]
  ! EQ              [ shift and go to state 111 ]
  ! NE              [ shift and go to state 112 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 151

    (94) expression -> expression AND expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 94 (expression -> expression AND expression .)
    AND             reduce using rule 94 (expression -> expression AND expression .)
    OR              reduce using rule 94 (expression -> expression AND expression .)
    RPAREN          reduce using rule 94 (expression -> expression AND expression .)
    COMMA           reduce using rule 94 (expression -> expression AND expression .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112

  ! PLUS            [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! NE              [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 114 ]


state 152

    (95) expression -> expression OR expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 95 (expression -> expression OR expression .)
    OR              reduce using rule 95 (expression -> expression OR expression .)
    RPAREN          reduce using rule 95 (expression -> expression OR expression .)
    COMMA           reduce using rule 95 (expression -> expression OR expression .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112
    AND             shift and go to state 113

  ! PLUS            [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! NE              [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 114 ]


state 153

    (98) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 98 (expression -> LPAREN expression RPAREN .)


state 154

    (33) function_declaration -> type ID LPAREN parameter_list RPAREN block .

    RBRACE          reduce using rule 33 (function_declaration -> type ID LPAREN parameter_list RPAREN block .)
    SEMICOLON       reduce using rule 33 (function_declaration -> type ID LPAREN parameter_list RPAREN block .)
    ID              reduce using rule 33 (function_declaration -> type ID LPAREN parameter_list RPAREN block .)
    PUBLIC          reduce using rule 33 (function_declaration -> type ID LPAREN parameter_list RPAREN block .)
    PRIVATE         reduce using rule 33 (function_declaration -> type ID LPAREN parameter_list RPAREN block .)
    VOID            reduce using rule 33 (function_declaration -> type ID LPAREN parameter_list RPAREN block .)
    INT             reduce using rule 33 (function_declaration -> type ID LPAREN parameter_list RPAREN block .)
    FLOAT           reduce using rule 33 (function_declaration -> type ID LPAREN parameter_list RPAREN block .)
    DOUBLE          reduce using rule 33 (function_declaration -> type ID LPAREN parameter_list RPAREN block .)
    STRINGTYPE      reduce using rule 33 (function_declaration -> type ID LPAREN parameter_list RPAREN block .)
    BOOL            reduce using rule 33 (function_declaration -> type ID LPAREN parameter_list RPAREN block .)
    CHAR            reduce using rule 33 (function_declaration -> type ID LPAREN parameter_list RPAREN block .)
    VAR             reduce using rule 33 (function_declaration -> type ID LPAREN parameter_list RPAREN block .)


state 155

    (34) function_declaration -> VOID ID LPAREN parameter_list RPAREN block .

    RBRACE          reduce using rule 34 (function_declaration -> VOID ID LPAREN parameter_list RPAREN block .)
    SEMICOLON       reduce using rule 34 (function_declaration -> VOID ID LPAREN parameter_list RPAREN block .)
    ID              reduce using rule 34 (function_declaration -> VOID ID LPAREN parameter_list RPAREN block .)
    PUBLIC          reduce using rule 34 (function_declaration -> VOID ID LPAREN parameter_list RPAREN block .)
    PRIVATE         reduce using rule 34 (function_declaration -> VOID ID LPAREN parameter_list RPAREN block .)
    VOID            reduce using rule 34 (function_declaration -> VOID ID LPAREN parameter_list RPAREN block .)
    INT             reduce using rule 34 (function_declaration -> VOID ID LPAREN parameter_list RPAREN block .)
    FLOAT           reduce using rule 34 (function_declaration -> VOID ID LPAREN parameter_list RPAREN block .)
    DOUBLE          reduce using rule 34 (function_declaration -> VOID ID LPAREN parameter_list RPAREN block .)
    STRINGTYPE      reduce using rule 34 (function_declaration -> VOID ID LPAREN parameter_list RPAREN block .)
    BOOL            reduce using rule 34 (function_declaration -> VOID ID LPAREN parameter_list RPAREN block .)
    CHAR            reduce using rule 34 (function_declaration -> VOID ID LPAREN parameter_list RPAREN block .)
    VAR             reduce using rule 34 (function_declaration -> VOID ID LPAREN parameter_list RPAREN block .)


state 156

    (54) assignment -> ID EQUALS expression . SEMICOLON
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       shift and go to state 172
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 157

    (55) assignment -> ID PLUSEQ expression . SEMICOLON
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       shift and go to state 173
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 158

    (56) assignment -> ID MINUSEQ expression . SEMICOLON
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       shift and go to state 174
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 159

    (57) assignment -> ID TIMESEQ expression . SEMICOLON
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       shift and go to state 175
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 160

    (58) assignment -> ID DIVEQ expression . SEMICOLON
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       shift and go to state 176
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 161

    (59) assignment -> ID MODEQ expression . SEMICOLON
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       shift and go to state 177
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 162

    (64) if_statement -> IF LPAREN expression . RPAREN statement else_clause
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    RPAREN          shift and go to state 178
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 163

    (67) while_statement -> WHILE LPAREN expression . RPAREN statement
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    RPAREN          shift and go to state 179
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 164

    (68) for_statement -> FOR LPAREN for_init . SEMICOLON for_condition SEMICOLON for_iter RPAREN statement

    SEMICOLON       shift and go to state 180


state 165

    (69) for_init -> var_declaration .

    SEMICOLON       reduce using rule 69 (for_init -> var_declaration .)


state 166

    (70) for_init -> assignment .

    SEMICOLON       reduce using rule 70 (for_init -> assignment .)


state 167

    (71) for_init -> empty .

    SEMICOLON       reduce using rule 71 (for_init -> empty .)


state 168

    (54) assignment -> ID . EQUALS expression SEMICOLON
    (55) assignment -> ID . PLUSEQ expression SEMICOLON
    (56) assignment -> ID . MINUSEQ expression SEMICOLON
    (57) assignment -> ID . TIMESEQ expression SEMICOLON
    (58) assignment -> ID . DIVEQ expression SEMICOLON
    (59) assignment -> ID . MODEQ expression SEMICOLON
    (32) type -> ID .

    EQUALS          shift and go to state 124
    PLUSEQ          shift and go to state 125
    MINUSEQ         shift and go to state 126
    TIMESEQ         shift and go to state 127
    DIVEQ           shift and go to state 128
    MODEQ           shift and go to state 129
    ID              reduce using rule 32 (type -> ID .)


state 169

    (76) return_statement -> RETURN expression SEMICOLON .

    RBRACE          reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    STRINGTYPE      reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    BOOL            reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    VAR             reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 76 (return_statement -> RETURN expression SEMICOLON .)


state 170

    (60) function_call -> ID LPAREN argument_list RPAREN .

    SEMICOLON       reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)
    MOD             reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)
    LT              reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)
    GT              reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)
    LE              reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)
    GE              reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)
    EQ              reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)
    NE              reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)
    AND             reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)
    OR              reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 60 (function_call -> ID LPAREN argument_list RPAREN .)


state 171

    (61) argument_list -> argument_list COMMA . expression
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    expression                     shift and go to state 181
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 172

    (54) assignment -> ID EQUALS expression SEMICOLON .

    RBRACE          reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    SEMICOLON       reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    ID              reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    IF              reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    FOR             reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    BREAK           reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    CONTINUE        reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    LBRACE          reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    INT             reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    DOUBLE          reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    STRINGTYPE      reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    BOOL            reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    CHAR            reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    VAR             reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    ELSE            reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)
    RPAREN          reduce using rule 54 (assignment -> ID EQUALS expression SEMICOLON .)


state 173

    (55) assignment -> ID PLUSEQ expression SEMICOLON .

    RBRACE          reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    SEMICOLON       reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    ID              reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    IF              reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    WHILE           reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    FOR             reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    RETURN          reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    BREAK           reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    CONTINUE        reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    LBRACE          reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    INT             reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    FLOAT           reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    DOUBLE          reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    STRINGTYPE      reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    BOOL            reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    CHAR            reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    VAR             reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    ELSE            reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)
    RPAREN          reduce using rule 55 (assignment -> ID PLUSEQ expression SEMICOLON .)


state 174

    (56) assignment -> ID MINUSEQ expression SEMICOLON .

    RBRACE          reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    SEMICOLON       reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    ID              reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    IF              reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    WHILE           reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    FOR             reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    RETURN          reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    BREAK           reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    CONTINUE        reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    LBRACE          reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    INT             reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    FLOAT           reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    DOUBLE          reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    STRINGTYPE      reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    BOOL            reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    CHAR            reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    VAR             reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    ELSE            reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)
    RPAREN          reduce using rule 56 (assignment -> ID MINUSEQ expression SEMICOLON .)


state 175

    (57) assignment -> ID TIMESEQ expression SEMICOLON .

    RBRACE          reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    SEMICOLON       reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    ID              reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    IF              reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    WHILE           reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    FOR             reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    RETURN          reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    BREAK           reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    CONTINUE        reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    LBRACE          reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    INT             reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    FLOAT           reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    DOUBLE          reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    STRINGTYPE      reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    BOOL            reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    CHAR            reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    VAR             reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    ELSE            reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)
    RPAREN          reduce using rule 57 (assignment -> ID TIMESEQ expression SEMICOLON .)


state 176

    (58) assignment -> ID DIVEQ expression SEMICOLON .

    RBRACE          reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    SEMICOLON       reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    ID              reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    IF              reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    WHILE           reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    FOR             reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    RETURN          reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    BREAK           reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    CONTINUE        reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    LBRACE          reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    INT             reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    FLOAT           reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    DOUBLE          reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    STRINGTYPE      reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    BOOL            reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    CHAR            reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    VAR             reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    ELSE            reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)
    RPAREN          reduce using rule 58 (assignment -> ID DIVEQ expression SEMICOLON .)


state 177

    (59) assignment -> ID MODEQ expression SEMICOLON .

    RBRACE          reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    SEMICOLON       reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    ID              reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    IF              reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    WHILE           reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    FOR             reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    RETURN          reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    BREAK           reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    CONTINUE        reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    LBRACE          reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    INT             reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    FLOAT           reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    DOUBLE          reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    STRINGTYPE      reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    BOOL            reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    CHAR            reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    VAR             reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    ELSE            reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)
    RPAREN          reduce using rule 59 (assignment -> ID MODEQ expression SEMICOLON .)


state 178

    (64) if_statement -> IF LPAREN expression RPAREN . statement else_clause
    (43) statement -> . var_declaration
    (44) statement -> . assignment
    (45) statement -> . function_call SEMICOLON
    (46) statement -> . if_statement
    (47) statement -> . while_statement
    (48) statement -> . for_statement
    (49) statement -> . return_statement
    (50) statement -> . break_statement
    (51) statement -> . continue_statement
    (52) statement -> . block
    (53) statement -> . SEMICOLON
    (23) var_declaration -> . type ID SEMICOLON
    (24) var_declaration -> . type ID EQUALS expression SEMICOLON
    (54) assignment -> . ID EQUALS expression SEMICOLON
    (55) assignment -> . ID PLUSEQ expression SEMICOLON
    (56) assignment -> . ID MINUSEQ expression SEMICOLON
    (57) assignment -> . ID TIMESEQ expression SEMICOLON
    (58) assignment -> . ID DIVEQ expression SEMICOLON
    (59) assignment -> . ID MODEQ expression SEMICOLON
    (60) function_call -> . ID LPAREN argument_list RPAREN
    (64) if_statement -> . IF LPAREN expression RPAREN statement else_clause
    (67) while_statement -> . WHILE LPAREN expression RPAREN statement
    (68) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement
    (76) return_statement -> . RETURN expression SEMICOLON
    (77) return_statement -> . RETURN SEMICOLON
    (78) break_statement -> . BREAK SEMICOLON
    (79) continue_statement -> . CONTINUE SEMICOLON
    (39) block -> . LBRACE statement_list RBRACE
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . DOUBLE
    (28) type -> . STRINGTYPE
    (29) type -> . BOOL
    (30) type -> . CHAR
    (31) type -> . VAR
    (32) type -> . ID

    SEMICOLON       shift and go to state 84
    ID              shift and go to state 93
    IF              shift and go to state 94
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    RETURN          shift and go to state 97
    BREAK           shift and go to state 98
    CONTINUE        shift and go to state 99
    LBRACE          shift and go to state 59
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    DOUBLE          shift and go to state 39
    STRINGTYPE      shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    VAR             shift and go to state 43

    statement                      shift and go to state 182
    var_declaration                shift and go to state 81
    assignment                     shift and go to state 82
    function_call                  shift and go to state 83
    if_statement                   shift and go to state 85
    while_statement                shift and go to state 86
    for_statement                  shift and go to state 87
    return_statement               shift and go to state 88
    break_statement                shift and go to state 89
    continue_statement             shift and go to state 90
    block                          shift and go to state 91
    type                           shift and go to state 92

state 179

    (67) while_statement -> WHILE LPAREN expression RPAREN . statement
    (43) statement -> . var_declaration
    (44) statement -> . assignment
    (45) statement -> . function_call SEMICOLON
    (46) statement -> . if_statement
    (47) statement -> . while_statement
    (48) statement -> . for_statement
    (49) statement -> . return_statement
    (50) statement -> . break_statement
    (51) statement -> . continue_statement
    (52) statement -> . block
    (53) statement -> . SEMICOLON
    (23) var_declaration -> . type ID SEMICOLON
    (24) var_declaration -> . type ID EQUALS expression SEMICOLON
    (54) assignment -> . ID EQUALS expression SEMICOLON
    (55) assignment -> . ID PLUSEQ expression SEMICOLON
    (56) assignment -> . ID MINUSEQ expression SEMICOLON
    (57) assignment -> . ID TIMESEQ expression SEMICOLON
    (58) assignment -> . ID DIVEQ expression SEMICOLON
    (59) assignment -> . ID MODEQ expression SEMICOLON
    (60) function_call -> . ID LPAREN argument_list RPAREN
    (64) if_statement -> . IF LPAREN expression RPAREN statement else_clause
    (67) while_statement -> . WHILE LPAREN expression RPAREN statement
    (68) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement
    (76) return_statement -> . RETURN expression SEMICOLON
    (77) return_statement -> . RETURN SEMICOLON
    (78) break_statement -> . BREAK SEMICOLON
    (79) continue_statement -> . CONTINUE SEMICOLON
    (39) block -> . LBRACE statement_list RBRACE
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . DOUBLE
    (28) type -> . STRINGTYPE
    (29) type -> . BOOL
    (30) type -> . CHAR
    (31) type -> . VAR
    (32) type -> . ID

    SEMICOLON       shift and go to state 84
    ID              shift and go to state 93
    IF              shift and go to state 94
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    RETURN          shift and go to state 97
    BREAK           shift and go to state 98
    CONTINUE        shift and go to state 99
    LBRACE          shift and go to state 59
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    DOUBLE          shift and go to state 39
    STRINGTYPE      shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    VAR             shift and go to state 43

    statement                      shift and go to state 183
    var_declaration                shift and go to state 81
    assignment                     shift and go to state 82
    function_call                  shift and go to state 83
    if_statement                   shift and go to state 85
    while_statement                shift and go to state 86
    for_statement                  shift and go to state 87
    return_statement               shift and go to state 88
    break_statement                shift and go to state 89
    continue_statement             shift and go to state 90
    block                          shift and go to state 91
    type                           shift and go to state 92

state 180

    (68) for_statement -> FOR LPAREN for_init SEMICOLON . for_condition SEMICOLON for_iter RPAREN statement
    (72) for_condition -> . expression
    (73) for_condition -> . empty
    (80) expression -> . literal
    (81) expression -> . ID
    (82) expression -> . function_call
    (83) expression -> . expression PLUS expression
    (84) expression -> . expression MINUS expression
    (85) expression -> . expression TIMES expression
    (86) expression -> . expression DIVIDE expression
    (87) expression -> . expression MOD expression
    (88) expression -> . expression LT expression
    (89) expression -> . expression GT expression
    (90) expression -> . expression LE expression
    (91) expression -> . expression GE expression
    (92) expression -> . expression EQ expression
    (93) expression -> . expression NE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . MINUS expression
    (97) expression -> . NOT expression
    (98) expression -> . LPAREN expression RPAREN
    (107) empty -> .
    (99) literal -> . INT
    (100) literal -> . FLOAT
    (101) literal -> . DOUBLE
    (102) literal -> . STRING
    (103) literal -> . TRUE
    (104) literal -> . FALSE
    (105) literal -> . CHAR
    (106) literal -> . NULL
    (60) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 61
    MINUS           shift and go to state 65
    NOT             shift and go to state 66
    LPAREN          shift and go to state 67
    SEMICOLON       reduce using rule 107 (empty -> .)
    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    DOUBLE          shift and go to state 70
    STRING          shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    CHAR            shift and go to state 74
    NULL            shift and go to state 75

    for_condition                  shift and go to state 184
    expression                     shift and go to state 185
    empty                          shift and go to state 186
    literal                        shift and go to state 63
    function_call                  shift and go to state 64

state 181

    (61) argument_list -> argument_list COMMA expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    RPAREN          reduce using rule 61 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 61 (argument_list -> argument_list COMMA expression .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 182

    (64) if_statement -> IF LPAREN expression RPAREN statement . else_clause
    (65) else_clause -> . ELSE statement
    (66) else_clause -> . empty
    (107) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 188
    RBRACE          reduce using rule 107 (empty -> .)
    SEMICOLON       reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    FOR             reduce using rule 107 (empty -> .)
    RETURN          reduce using rule 107 (empty -> .)
    BREAK           reduce using rule 107 (empty -> .)
    CONTINUE        reduce using rule 107 (empty -> .)
    LBRACE          reduce using rule 107 (empty -> .)
    INT             reduce using rule 107 (empty -> .)
    FLOAT           reduce using rule 107 (empty -> .)
    DOUBLE          reduce using rule 107 (empty -> .)
    STRINGTYPE      reduce using rule 107 (empty -> .)
    BOOL            reduce using rule 107 (empty -> .)
    CHAR            reduce using rule 107 (empty -> .)
    VAR             reduce using rule 107 (empty -> .)

  ! ELSE            [ reduce using rule 107 (empty -> .) ]

    else_clause                    shift and go to state 187
    empty                          shift and go to state 189

state 183

    (67) while_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    STRINGTYPE      reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    VAR             reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 67 (while_statement -> WHILE LPAREN expression RPAREN statement .)


state 184

    (68) for_statement -> FOR LPAREN for_init SEMICOLON for_condition . SEMICOLON for_iter RPAREN statement

    SEMICOLON       shift and go to state 190


state 185

    (72) for_condition -> expression .
    (83) expression -> expression . PLUS expression
    (84) expression -> expression . MINUS expression
    (85) expression -> expression . TIMES expression
    (86) expression -> expression . DIVIDE expression
    (87) expression -> expression . MOD expression
    (88) expression -> expression . LT expression
    (89) expression -> expression . GT expression
    (90) expression -> expression . LE expression
    (91) expression -> expression . GE expression
    (92) expression -> expression . EQ expression
    (93) expression -> expression . NE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression

    SEMICOLON       reduce using rule 72 (for_condition -> expression .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 105
    MOD             shift and go to state 106
    LT              shift and go to state 107
    GT              shift and go to state 108
    LE              shift and go to state 109
    GE              shift and go to state 110
    EQ              shift and go to state 111
    NE              shift and go to state 112
    AND             shift and go to state 113
    OR              shift and go to state 114


state 186

    (73) for_condition -> empty .

    SEMICOLON       reduce using rule 73 (for_condition -> empty .)


state 187

    (64) if_statement -> IF LPAREN expression RPAREN statement else_clause .

    RBRACE          reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    SEMICOLON       reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    ID              reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    IF              reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    WHILE           reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    FOR             reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    RETURN          reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    BREAK           reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    CONTINUE        reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    LBRACE          reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    INT             reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    FLOAT           reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    DOUBLE          reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    STRINGTYPE      reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    BOOL            reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    CHAR            reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    VAR             reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)
    ELSE            reduce using rule 64 (if_statement -> IF LPAREN expression RPAREN statement else_clause .)


state 188

    (65) else_clause -> ELSE . statement
    (43) statement -> . var_declaration
    (44) statement -> . assignment
    (45) statement -> . function_call SEMICOLON
    (46) statement -> . if_statement
    (47) statement -> . while_statement
    (48) statement -> . for_statement
    (49) statement -> . return_statement
    (50) statement -> . break_statement
    (51) statement -> . continue_statement
    (52) statement -> . block
    (53) statement -> . SEMICOLON
    (23) var_declaration -> . type ID SEMICOLON
    (24) var_declaration -> . type ID EQUALS expression SEMICOLON
    (54) assignment -> . ID EQUALS expression SEMICOLON
    (55) assignment -> . ID PLUSEQ expression SEMICOLON
    (56) assignment -> . ID MINUSEQ expression SEMICOLON
    (57) assignment -> . ID TIMESEQ expression SEMICOLON
    (58) assignment -> . ID DIVEQ expression SEMICOLON
    (59) assignment -> . ID MODEQ expression SEMICOLON
    (60) function_call -> . ID LPAREN argument_list RPAREN
    (64) if_statement -> . IF LPAREN expression RPAREN statement else_clause
    (67) while_statement -> . WHILE LPAREN expression RPAREN statement
    (68) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement
    (76) return_statement -> . RETURN expression SEMICOLON
    (77) return_statement -> . RETURN SEMICOLON
    (78) break_statement -> . BREAK SEMICOLON
    (79) continue_statement -> . CONTINUE SEMICOLON
    (39) block -> . LBRACE statement_list RBRACE
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . DOUBLE
    (28) type -> . STRINGTYPE
    (29) type -> . BOOL
    (30) type -> . CHAR
    (31) type -> . VAR
    (32) type -> . ID

    SEMICOLON       shift and go to state 84
    ID              shift and go to state 93
    IF              shift and go to state 94
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    RETURN          shift and go to state 97
    BREAK           shift and go to state 98
    CONTINUE        shift and go to state 99
    LBRACE          shift and go to state 59
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    DOUBLE          shift and go to state 39
    STRINGTYPE      shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    VAR             shift and go to state 43

    statement                      shift and go to state 191
    var_declaration                shift and go to state 81
    assignment                     shift and go to state 82
    function_call                  shift and go to state 83
    if_statement                   shift and go to state 85
    while_statement                shift and go to state 86
    for_statement                  shift and go to state 87
    return_statement               shift and go to state 88
    break_statement                shift and go to state 89
    continue_statement             shift and go to state 90
    block                          shift and go to state 91
    type                           shift and go to state 92

state 189

    (66) else_clause -> empty .

    ELSE            reduce using rule 66 (else_clause -> empty .)
    RBRACE          reduce using rule 66 (else_clause -> empty .)
    SEMICOLON       reduce using rule 66 (else_clause -> empty .)
    ID              reduce using rule 66 (else_clause -> empty .)
    IF              reduce using rule 66 (else_clause -> empty .)
    WHILE           reduce using rule 66 (else_clause -> empty .)
    FOR             reduce using rule 66 (else_clause -> empty .)
    RETURN          reduce using rule 66 (else_clause -> empty .)
    BREAK           reduce using rule 66 (else_clause -> empty .)
    CONTINUE        reduce using rule 66 (else_clause -> empty .)
    LBRACE          reduce using rule 66 (else_clause -> empty .)
    INT             reduce using rule 66 (else_clause -> empty .)
    FLOAT           reduce using rule 66 (else_clause -> empty .)
    DOUBLE          reduce using rule 66 (else_clause -> empty .)
    STRINGTYPE      reduce using rule 66 (else_clause -> empty .)
    BOOL            reduce using rule 66 (else_clause -> empty .)
    CHAR            reduce using rule 66 (else_clause -> empty .)
    VAR             reduce using rule 66 (else_clause -> empty .)


state 190

    (68) for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON . for_iter RPAREN statement
    (74) for_iter -> . assignment
    (75) for_iter -> . empty
    (54) assignment -> . ID EQUALS expression SEMICOLON
    (55) assignment -> . ID PLUSEQ expression SEMICOLON
    (56) assignment -> . ID MINUSEQ expression SEMICOLON
    (57) assignment -> . ID TIMESEQ expression SEMICOLON
    (58) assignment -> . ID DIVEQ expression SEMICOLON
    (59) assignment -> . ID MODEQ expression SEMICOLON
    (107) empty -> .

    ID              shift and go to state 195
    RPAREN          reduce using rule 107 (empty -> .)

    for_iter                       shift and go to state 192
    assignment                     shift and go to state 193
    empty                          shift and go to state 194

state 191

    (65) else_clause -> ELSE statement .

    ELSE            reduce using rule 65 (else_clause -> ELSE statement .)
    RBRACE          reduce using rule 65 (else_clause -> ELSE statement .)
    SEMICOLON       reduce using rule 65 (else_clause -> ELSE statement .)
    ID              reduce using rule 65 (else_clause -> ELSE statement .)
    IF              reduce using rule 65 (else_clause -> ELSE statement .)
    WHILE           reduce using rule 65 (else_clause -> ELSE statement .)
    FOR             reduce using rule 65 (else_clause -> ELSE statement .)
    RETURN          reduce using rule 65 (else_clause -> ELSE statement .)
    BREAK           reduce using rule 65 (else_clause -> ELSE statement .)
    CONTINUE        reduce using rule 65 (else_clause -> ELSE statement .)
    LBRACE          reduce using rule 65 (else_clause -> ELSE statement .)
    INT             reduce using rule 65 (else_clause -> ELSE statement .)
    FLOAT           reduce using rule 65 (else_clause -> ELSE statement .)
    DOUBLE          reduce using rule 65 (else_clause -> ELSE statement .)
    STRINGTYPE      reduce using rule 65 (else_clause -> ELSE statement .)
    BOOL            reduce using rule 65 (else_clause -> ELSE statement .)
    CHAR            reduce using rule 65 (else_clause -> ELSE statement .)
    VAR             reduce using rule 65 (else_clause -> ELSE statement .)


state 192

    (68) for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter . RPAREN statement

    RPAREN          shift and go to state 196


state 193

    (74) for_iter -> assignment .

    RPAREN          reduce using rule 74 (for_iter -> assignment .)


state 194

    (75) for_iter -> empty .

    RPAREN          reduce using rule 75 (for_iter -> empty .)


state 195

    (54) assignment -> ID . EQUALS expression SEMICOLON
    (55) assignment -> ID . PLUSEQ expression SEMICOLON
    (56) assignment -> ID . MINUSEQ expression SEMICOLON
    (57) assignment -> ID . TIMESEQ expression SEMICOLON
    (58) assignment -> ID . DIVEQ expression SEMICOLON
    (59) assignment -> ID . MODEQ expression SEMICOLON

    EQUALS          shift and go to state 124
    PLUSEQ          shift and go to state 125
    MINUSEQ         shift and go to state 126
    TIMESEQ         shift and go to state 127
    DIVEQ           shift and go to state 128
    MODEQ           shift and go to state 129


state 196

    (68) for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN . statement
    (43) statement -> . var_declaration
    (44) statement -> . assignment
    (45) statement -> . function_call SEMICOLON
    (46) statement -> . if_statement
    (47) statement -> . while_statement
    (48) statement -> . for_statement
    (49) statement -> . return_statement
    (50) statement -> . break_statement
    (51) statement -> . continue_statement
    (52) statement -> . block
    (53) statement -> . SEMICOLON
    (23) var_declaration -> . type ID SEMICOLON
    (24) var_declaration -> . type ID EQUALS expression SEMICOLON
    (54) assignment -> . ID EQUALS expression SEMICOLON
    (55) assignment -> . ID PLUSEQ expression SEMICOLON
    (56) assignment -> . ID MINUSEQ expression SEMICOLON
    (57) assignment -> . ID TIMESEQ expression SEMICOLON
    (58) assignment -> . ID DIVEQ expression SEMICOLON
    (59) assignment -> . ID MODEQ expression SEMICOLON
    (60) function_call -> . ID LPAREN argument_list RPAREN
    (64) if_statement -> . IF LPAREN expression RPAREN statement else_clause
    (67) while_statement -> . WHILE LPAREN expression RPAREN statement
    (68) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement
    (76) return_statement -> . RETURN expression SEMICOLON
    (77) return_statement -> . RETURN SEMICOLON
    (78) break_statement -> . BREAK SEMICOLON
    (79) continue_statement -> . CONTINUE SEMICOLON
    (39) block -> . LBRACE statement_list RBRACE
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . DOUBLE
    (28) type -> . STRINGTYPE
    (29) type -> . BOOL
    (30) type -> . CHAR
    (31) type -> . VAR
    (32) type -> . ID

    SEMICOLON       shift and go to state 84
    ID              shift and go to state 93
    IF              shift and go to state 94
    WHILE           shift and go to state 95
    FOR             shift and go to state 96
    RETURN          shift and go to state 97
    BREAK           shift and go to state 98
    CONTINUE        shift and go to state 99
    LBRACE          shift and go to state 59
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    DOUBLE          shift and go to state 39
    STRINGTYPE      shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    VAR             shift and go to state 43

    statement                      shift and go to state 197
    var_declaration                shift and go to state 81
    assignment                     shift and go to state 82
    function_call                  shift and go to state 83
    if_statement                   shift and go to state 85
    while_statement                shift and go to state 86
    for_statement                  shift and go to state 87
    return_statement               shift and go to state 88
    break_statement                shift and go to state 89
    continue_statement             shift and go to state 90
    block                          shift and go to state 91
    type                           shift and go to state 92

state 197

    (68) for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .

    RBRACE          reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    SEMICOLON       reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    ID              reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    IF              reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    WHILE           reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    FOR             reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    RETURN          reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    BREAK           reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    CONTINUE        reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    LBRACE          reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    INT             reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    FLOAT           reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    DOUBLE          reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    STRINGTYPE      reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    BOOL            reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    CHAR            reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    VAR             reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)
    ELSE            reduce using rule 68 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_iter RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 14 resolved as shift
WARNING: shift/reduce conflict for ID in state 14 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 14 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 14 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 15 resolved as shift
WARNING: shift/reduce conflict for ID in state 15 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 15 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 15 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 17 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 17 resolved as shift
WARNING: shift/reduce conflict for ID in state 17 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 26 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 26 resolved as shift
WARNING: shift/reduce conflict for ID in state 26 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 59 resolved as shift
WARNING: shift/reduce conflict for ID in state 59 resolved as shift
WARNING: shift/reduce conflict for IF in state 59 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 59 resolved as shift
WARNING: shift/reduce conflict for FOR in state 59 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 59 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 59 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 59 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 59 resolved as shift
WARNING: shift/reduce conflict for INT in state 59 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 59 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 59 resolved as shift
WARNING: shift/reduce conflict for STRINGTYPE in state 59 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 59 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 59 resolved as shift
WARNING: shift/reduce conflict for VAR in state 59 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 182 resolved as shift
WARNING: reduce/reduce conflict in state 19 resolved using rule (class_body -> empty)
WARNING: rejected rule (member_modifiers -> empty) in state 19
