Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADD
    AND
    CHAR
    CLASS
    COLON
    COMMA
    CONSOLE
    DOT
    DOUBLE
    ELSE
    EQ
    FOR
    GE
    GT
    IF
    LBRACE
    LBRACKET
    LE
    LIST
    LT
    MINUSEQUAL
    MINUSMINUS
    MOD
    NE
    NEW
    NOT
    OR
    PARSE
    PLUSEQUAL
    PLUSPLUS
    PRIVATE
    PROTECTED
    PUBLIC
    RBRACE
    RBRACKET
    READLINE
    RETURN
    STRING
    USING
    VAR
    VOID
    WRITELINE

Grammar

Rule 0     S' -> program
Rule 1     program -> declarations
Rule 2     declarations -> declarations declaration
Rule 3     declarations -> declaration
Rule 4     declaration -> type ID ASSIGN expression SEMICOLON
Rule 5     declaration -> type ID SEMICOLON
Rule 6     type -> INT
Rule 7     type -> FLOAT
Rule 8     type -> BOOL
Rule 9     type -> STRINGTYPE
Rule 10    expression -> expression PLUS expression
Rule 11    expression -> expression MINUS expression
Rule 12    expression -> expression TIMES expression
Rule 13    expression -> expression DIVIDE expression
Rule 14    expression -> LPAREN expression RPAREN
Rule 15    expression -> INT_CONST
Rule 16    expression -> FLOAT_CONST
Rule 17    expression -> TRUE
Rule 18    expression -> FALSE
Rule 19    expression -> STRING_CONST
Rule 20    expression -> ID

Terminals, with rules where they appear

ADD                  : 
AND                  : 
ASSIGN               : 4
BOOL                 : 8
CHAR                 : 
CLASS                : 
COLON                : 
COMMA                : 
CONSOLE              : 
DIVIDE               : 13
DOT                  : 
DOUBLE               : 
ELSE                 : 
EQ                   : 
FALSE                : 18
FLOAT                : 7
FLOAT_CONST          : 16
FOR                  : 
GE                   : 
GT                   : 
ID                   : 4 5 20
IF                   : 
INT                  : 6
INT_CONST            : 15
LBRACE               : 
LBRACKET             : 
LE                   : 
LIST                 : 
LPAREN               : 14
LT                   : 
MINUS                : 11
MINUSEQUAL           : 
MINUSMINUS           : 
MOD                  : 
NE                   : 
NEW                  : 
NOT                  : 
OR                   : 
PARSE                : 
PLUS                 : 10
PLUSEQUAL            : 
PLUSPLUS             : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RBRACE               : 
RBRACKET             : 
READLINE             : 
RETURN               : 
RPAREN               : 14
SEMICOLON            : 4 5
STRING               : 
STRINGTYPE           : 9
STRING_CONST         : 19
TIMES                : 12
TRUE                 : 17
USING                : 
VAR                  : 
VOID                 : 
WRITELINE            : 
error                : 

Nonterminals, with rules where they appear

declaration          : 2 3
declarations         : 1 2
expression           : 4 10 10 11 11 12 12 13 13 14
program              : 0
type                 : 4 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declarations
    (2) declarations -> . declarations declaration
    (3) declarations -> . declaration
    (4) declaration -> . type ID ASSIGN expression SEMICOLON
    (5) declaration -> . type ID SEMICOLON
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . STRINGTYPE

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    BOOL            shift and go to state 7
    STRINGTYPE      shift and go to state 8

    program                        shift and go to state 1
    declarations                   shift and go to state 2
    declaration                    shift and go to state 3
    type                           shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> declarations .
    (2) declarations -> declarations . declaration
    (4) declaration -> . type ID ASSIGN expression SEMICOLON
    (5) declaration -> . type ID SEMICOLON
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOL
    (9) type -> . STRINGTYPE

    $end            reduce using rule 1 (program -> declarations .)
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    BOOL            shift and go to state 7
    STRINGTYPE      shift and go to state 8

    declaration                    shift and go to state 9
    type                           shift and go to state 4

state 3

    (3) declarations -> declaration .

    INT             reduce using rule 3 (declarations -> declaration .)
    FLOAT           reduce using rule 3 (declarations -> declaration .)
    BOOL            reduce using rule 3 (declarations -> declaration .)
    STRINGTYPE      reduce using rule 3 (declarations -> declaration .)
    $end            reduce using rule 3 (declarations -> declaration .)


state 4

    (4) declaration -> type . ID ASSIGN expression SEMICOLON
    (5) declaration -> type . ID SEMICOLON

    ID              shift and go to state 10


state 5

    (6) type -> INT .

    ID              reduce using rule 6 (type -> INT .)


state 6

    (7) type -> FLOAT .

    ID              reduce using rule 7 (type -> FLOAT .)


state 7

    (8) type -> BOOL .

    ID              reduce using rule 8 (type -> BOOL .)


state 8

    (9) type -> STRINGTYPE .

    ID              reduce using rule 9 (type -> STRINGTYPE .)


state 9

    (2) declarations -> declarations declaration .

    INT             reduce using rule 2 (declarations -> declarations declaration .)
    FLOAT           reduce using rule 2 (declarations -> declarations declaration .)
    BOOL            reduce using rule 2 (declarations -> declarations declaration .)
    STRINGTYPE      reduce using rule 2 (declarations -> declarations declaration .)
    $end            reduce using rule 2 (declarations -> declarations declaration .)


state 10

    (4) declaration -> type ID . ASSIGN expression SEMICOLON
    (5) declaration -> type ID . SEMICOLON

    ASSIGN          shift and go to state 11
    SEMICOLON       shift and go to state 12


state 11

    (4) declaration -> type ID ASSIGN . expression SEMICOLON
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression TIMES expression
    (13) expression -> . expression DIVIDE expression
    (14) expression -> . LPAREN expression RPAREN
    (15) expression -> . INT_CONST
    (16) expression -> . FLOAT_CONST
    (17) expression -> . TRUE
    (18) expression -> . FALSE
    (19) expression -> . STRING_CONST
    (20) expression -> . ID

    LPAREN          shift and go to state 15
    INT_CONST       shift and go to state 16
    FLOAT_CONST     shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    STRING_CONST    shift and go to state 20
    ID              shift and go to state 13

    expression                     shift and go to state 14

state 12

    (5) declaration -> type ID SEMICOLON .

    INT             reduce using rule 5 (declaration -> type ID SEMICOLON .)
    FLOAT           reduce using rule 5 (declaration -> type ID SEMICOLON .)
    BOOL            reduce using rule 5 (declaration -> type ID SEMICOLON .)
    STRINGTYPE      reduce using rule 5 (declaration -> type ID SEMICOLON .)
    $end            reduce using rule 5 (declaration -> type ID SEMICOLON .)


state 13

    (20) expression -> ID .

    SEMICOLON       reduce using rule 20 (expression -> ID .)
    PLUS            reduce using rule 20 (expression -> ID .)
    MINUS           reduce using rule 20 (expression -> ID .)
    TIMES           reduce using rule 20 (expression -> ID .)
    DIVIDE          reduce using rule 20 (expression -> ID .)
    RPAREN          reduce using rule 20 (expression -> ID .)


state 14

    (4) declaration -> type ID ASSIGN expression . SEMICOLON
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . TIMES expression
    (13) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 21
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 25


state 15

    (14) expression -> LPAREN . expression RPAREN
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression TIMES expression
    (13) expression -> . expression DIVIDE expression
    (14) expression -> . LPAREN expression RPAREN
    (15) expression -> . INT_CONST
    (16) expression -> . FLOAT_CONST
    (17) expression -> . TRUE
    (18) expression -> . FALSE
    (19) expression -> . STRING_CONST
    (20) expression -> . ID

    LPAREN          shift and go to state 15
    INT_CONST       shift and go to state 16
    FLOAT_CONST     shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    STRING_CONST    shift and go to state 20
    ID              shift and go to state 13

    expression                     shift and go to state 26

state 16

    (15) expression -> INT_CONST .

    SEMICOLON       reduce using rule 15 (expression -> INT_CONST .)
    PLUS            reduce using rule 15 (expression -> INT_CONST .)
    MINUS           reduce using rule 15 (expression -> INT_CONST .)
    TIMES           reduce using rule 15 (expression -> INT_CONST .)
    DIVIDE          reduce using rule 15 (expression -> INT_CONST .)
    RPAREN          reduce using rule 15 (expression -> INT_CONST .)


state 17

    (16) expression -> FLOAT_CONST .

    SEMICOLON       reduce using rule 16 (expression -> FLOAT_CONST .)
    PLUS            reduce using rule 16 (expression -> FLOAT_CONST .)
    MINUS           reduce using rule 16 (expression -> FLOAT_CONST .)
    TIMES           reduce using rule 16 (expression -> FLOAT_CONST .)
    DIVIDE          reduce using rule 16 (expression -> FLOAT_CONST .)
    RPAREN          reduce using rule 16 (expression -> FLOAT_CONST .)


state 18

    (17) expression -> TRUE .

    SEMICOLON       reduce using rule 17 (expression -> TRUE .)
    PLUS            reduce using rule 17 (expression -> TRUE .)
    MINUS           reduce using rule 17 (expression -> TRUE .)
    TIMES           reduce using rule 17 (expression -> TRUE .)
    DIVIDE          reduce using rule 17 (expression -> TRUE .)
    RPAREN          reduce using rule 17 (expression -> TRUE .)


state 19

    (18) expression -> FALSE .

    SEMICOLON       reduce using rule 18 (expression -> FALSE .)
    PLUS            reduce using rule 18 (expression -> FALSE .)
    MINUS           reduce using rule 18 (expression -> FALSE .)
    TIMES           reduce using rule 18 (expression -> FALSE .)
    DIVIDE          reduce using rule 18 (expression -> FALSE .)
    RPAREN          reduce using rule 18 (expression -> FALSE .)


state 20

    (19) expression -> STRING_CONST .

    SEMICOLON       reduce using rule 19 (expression -> STRING_CONST .)
    PLUS            reduce using rule 19 (expression -> STRING_CONST .)
    MINUS           reduce using rule 19 (expression -> STRING_CONST .)
    TIMES           reduce using rule 19 (expression -> STRING_CONST .)
    DIVIDE          reduce using rule 19 (expression -> STRING_CONST .)
    RPAREN          reduce using rule 19 (expression -> STRING_CONST .)


state 21

    (4) declaration -> type ID ASSIGN expression SEMICOLON .

    INT             reduce using rule 4 (declaration -> type ID ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 4 (declaration -> type ID ASSIGN expression SEMICOLON .)
    BOOL            reduce using rule 4 (declaration -> type ID ASSIGN expression SEMICOLON .)
    STRINGTYPE      reduce using rule 4 (declaration -> type ID ASSIGN expression SEMICOLON .)
    $end            reduce using rule 4 (declaration -> type ID ASSIGN expression SEMICOLON .)


state 22

    (10) expression -> expression PLUS . expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression TIMES expression
    (13) expression -> . expression DIVIDE expression
    (14) expression -> . LPAREN expression RPAREN
    (15) expression -> . INT_CONST
    (16) expression -> . FLOAT_CONST
    (17) expression -> . TRUE
    (18) expression -> . FALSE
    (19) expression -> . STRING_CONST
    (20) expression -> . ID

    LPAREN          shift and go to state 15
    INT_CONST       shift and go to state 16
    FLOAT_CONST     shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    STRING_CONST    shift and go to state 20
    ID              shift and go to state 13

    expression                     shift and go to state 27

state 23

    (11) expression -> expression MINUS . expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression TIMES expression
    (13) expression -> . expression DIVIDE expression
    (14) expression -> . LPAREN expression RPAREN
    (15) expression -> . INT_CONST
    (16) expression -> . FLOAT_CONST
    (17) expression -> . TRUE
    (18) expression -> . FALSE
    (19) expression -> . STRING_CONST
    (20) expression -> . ID

    LPAREN          shift and go to state 15
    INT_CONST       shift and go to state 16
    FLOAT_CONST     shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    STRING_CONST    shift and go to state 20
    ID              shift and go to state 13

    expression                     shift and go to state 28

state 24

    (12) expression -> expression TIMES . expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression TIMES expression
    (13) expression -> . expression DIVIDE expression
    (14) expression -> . LPAREN expression RPAREN
    (15) expression -> . INT_CONST
    (16) expression -> . FLOAT_CONST
    (17) expression -> . TRUE
    (18) expression -> . FALSE
    (19) expression -> . STRING_CONST
    (20) expression -> . ID

    LPAREN          shift and go to state 15
    INT_CONST       shift and go to state 16
    FLOAT_CONST     shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    STRING_CONST    shift and go to state 20
    ID              shift and go to state 13

    expression                     shift and go to state 29

state 25

    (13) expression -> expression DIVIDE . expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression TIMES expression
    (13) expression -> . expression DIVIDE expression
    (14) expression -> . LPAREN expression RPAREN
    (15) expression -> . INT_CONST
    (16) expression -> . FLOAT_CONST
    (17) expression -> . TRUE
    (18) expression -> . FALSE
    (19) expression -> . STRING_CONST
    (20) expression -> . ID

    LPAREN          shift and go to state 15
    INT_CONST       shift and go to state 16
    FLOAT_CONST     shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    STRING_CONST    shift and go to state 20
    ID              shift and go to state 13

    expression                     shift and go to state 30

state 26

    (14) expression -> LPAREN expression . RPAREN
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . TIMES expression
    (13) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 31
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 25


state 27

    (10) expression -> expression PLUS expression .
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . TIMES expression
    (13) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 10 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 10 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 10 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 10 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 25

  ! TIMES           [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]


state 28

    (11) expression -> expression MINUS expression .
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . TIMES expression
    (13) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 11 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 11 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 11 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 11 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 25

  ! TIMES           [ reduce using rule 11 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 11 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]


state 29

    (12) expression -> expression TIMES expression .
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . TIMES expression
    (13) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 12 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 12 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 12 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 12 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 12 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 12 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! TIMES           [ shift and go to state 24 ]
  ! DIVIDE          [ shift and go to state 25 ]


state 30

    (13) expression -> expression DIVIDE expression .
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . TIMES expression
    (13) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 13 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 13 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 13 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 13 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 13 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 13 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! TIMES           [ shift and go to state 24 ]
  ! DIVIDE          [ shift and go to state 25 ]


state 31

    (14) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 14 (expression -> LPAREN expression RPAREN .)

